// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: direct.proto

#include "direct.pb.h"
#include "direct.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace direct {

static const char* Direct_method_names[] = {
  "/direct.Direct/Init",
  "/direct.Direct/Data",
  "/direct.Direct/Settings",
  "/direct.Direct/Cost",
  "/direct.Direct/Noise",
  "/direct.Direct/Reset",
  "/direct.Direct/Optimize",
  "/direct.Direct/Status",
  "/direct.Direct/SensorInfo",
};

std::unique_ptr< Direct::Stub> Direct::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Direct::Stub> stub(new Direct::Stub(channel, options));
  return stub;
}

Direct::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Init_(Direct_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Data_(Direct_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Settings_(Direct_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Cost_(Direct_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Noise_(Direct_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reset_(Direct_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Optimize_(Direct_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Status_(Direct_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SensorInfo_(Direct_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Direct::Stub::Init(::grpc::ClientContext* context, const ::direct::InitRequest& request, ::direct::InitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::direct::InitRequest, ::direct::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Init_, context, request, response);
}

void Direct::Stub::async::Init(::grpc::ClientContext* context, const ::direct::InitRequest* request, ::direct::InitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::direct::InitRequest, ::direct::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, std::move(f));
}

void Direct::Stub::async::Init(::grpc::ClientContext* context, const ::direct::InitRequest* request, ::direct::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::direct::InitResponse>* Direct::Stub::PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::direct::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::direct::InitResponse, ::direct::InitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::direct::InitResponse>* Direct::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::direct::InitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Direct::Stub::Data(::grpc::ClientContext* context, const ::direct::DataRequest& request, ::direct::DataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::direct::DataRequest, ::direct::DataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Data_, context, request, response);
}

void Direct::Stub::async::Data(::grpc::ClientContext* context, const ::direct::DataRequest* request, ::direct::DataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::direct::DataRequest, ::direct::DataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Data_, context, request, response, std::move(f));
}

void Direct::Stub::async::Data(::grpc::ClientContext* context, const ::direct::DataRequest* request, ::direct::DataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Data_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::direct::DataResponse>* Direct::Stub::PrepareAsyncDataRaw(::grpc::ClientContext* context, const ::direct::DataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::direct::DataResponse, ::direct::DataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Data_, context, request);
}

::grpc::ClientAsyncResponseReader< ::direct::DataResponse>* Direct::Stub::AsyncDataRaw(::grpc::ClientContext* context, const ::direct::DataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Direct::Stub::Settings(::grpc::ClientContext* context, const ::direct::SettingsRequest& request, ::direct::SettingsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::direct::SettingsRequest, ::direct::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Settings_, context, request, response);
}

void Direct::Stub::async::Settings(::grpc::ClientContext* context, const ::direct::SettingsRequest* request, ::direct::SettingsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::direct::SettingsRequest, ::direct::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Settings_, context, request, response, std::move(f));
}

void Direct::Stub::async::Settings(::grpc::ClientContext* context, const ::direct::SettingsRequest* request, ::direct::SettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Settings_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::direct::SettingsResponse>* Direct::Stub::PrepareAsyncSettingsRaw(::grpc::ClientContext* context, const ::direct::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::direct::SettingsResponse, ::direct::SettingsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Settings_, context, request);
}

::grpc::ClientAsyncResponseReader< ::direct::SettingsResponse>* Direct::Stub::AsyncSettingsRaw(::grpc::ClientContext* context, const ::direct::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSettingsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Direct::Stub::Cost(::grpc::ClientContext* context, const ::direct::CostRequest& request, ::direct::CostResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::direct::CostRequest, ::direct::CostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Cost_, context, request, response);
}

void Direct::Stub::async::Cost(::grpc::ClientContext* context, const ::direct::CostRequest* request, ::direct::CostResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::direct::CostRequest, ::direct::CostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Cost_, context, request, response, std::move(f));
}

void Direct::Stub::async::Cost(::grpc::ClientContext* context, const ::direct::CostRequest* request, ::direct::CostResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Cost_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::direct::CostResponse>* Direct::Stub::PrepareAsyncCostRaw(::grpc::ClientContext* context, const ::direct::CostRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::direct::CostResponse, ::direct::CostRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Cost_, context, request);
}

::grpc::ClientAsyncResponseReader< ::direct::CostResponse>* Direct::Stub::AsyncCostRaw(::grpc::ClientContext* context, const ::direct::CostRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCostRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Direct::Stub::Noise(::grpc::ClientContext* context, const ::direct::NoiseRequest& request, ::direct::NoiseResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::direct::NoiseRequest, ::direct::NoiseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Noise_, context, request, response);
}

void Direct::Stub::async::Noise(::grpc::ClientContext* context, const ::direct::NoiseRequest* request, ::direct::NoiseResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::direct::NoiseRequest, ::direct::NoiseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Noise_, context, request, response, std::move(f));
}

void Direct::Stub::async::Noise(::grpc::ClientContext* context, const ::direct::NoiseRequest* request, ::direct::NoiseResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Noise_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::direct::NoiseResponse>* Direct::Stub::PrepareAsyncNoiseRaw(::grpc::ClientContext* context, const ::direct::NoiseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::direct::NoiseResponse, ::direct::NoiseRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Noise_, context, request);
}

::grpc::ClientAsyncResponseReader< ::direct::NoiseResponse>* Direct::Stub::AsyncNoiseRaw(::grpc::ClientContext* context, const ::direct::NoiseRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNoiseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Direct::Stub::Reset(::grpc::ClientContext* context, const ::direct::ResetRequest& request, ::direct::ResetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::direct::ResetRequest, ::direct::ResetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Reset_, context, request, response);
}

void Direct::Stub::async::Reset(::grpc::ClientContext* context, const ::direct::ResetRequest* request, ::direct::ResetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::direct::ResetRequest, ::direct::ResetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

void Direct::Stub::async::Reset(::grpc::ClientContext* context, const ::direct::ResetRequest* request, ::direct::ResetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::direct::ResetResponse>* Direct::Stub::PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::direct::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::direct::ResetResponse, ::direct::ResetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Reset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::direct::ResetResponse>* Direct::Stub::AsyncResetRaw(::grpc::ClientContext* context, const ::direct::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Direct::Stub::Optimize(::grpc::ClientContext* context, const ::direct::OptimizeRequest& request, ::direct::OptimizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::direct::OptimizeRequest, ::direct::OptimizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Optimize_, context, request, response);
}

void Direct::Stub::async::Optimize(::grpc::ClientContext* context, const ::direct::OptimizeRequest* request, ::direct::OptimizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::direct::OptimizeRequest, ::direct::OptimizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Optimize_, context, request, response, std::move(f));
}

void Direct::Stub::async::Optimize(::grpc::ClientContext* context, const ::direct::OptimizeRequest* request, ::direct::OptimizeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Optimize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::direct::OptimizeResponse>* Direct::Stub::PrepareAsyncOptimizeRaw(::grpc::ClientContext* context, const ::direct::OptimizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::direct::OptimizeResponse, ::direct::OptimizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Optimize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::direct::OptimizeResponse>* Direct::Stub::AsyncOptimizeRaw(::grpc::ClientContext* context, const ::direct::OptimizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOptimizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Direct::Stub::Status(::grpc::ClientContext* context, const ::direct::StatusRequest& request, ::direct::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::direct::StatusRequest, ::direct::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Status_, context, request, response);
}

void Direct::Stub::async::Status(::grpc::ClientContext* context, const ::direct::StatusRequest* request, ::direct::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::direct::StatusRequest, ::direct::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void Direct::Stub::async::Status(::grpc::ClientContext* context, const ::direct::StatusRequest* request, ::direct::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::direct::StatusResponse>* Direct::Stub::PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::direct::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::direct::StatusResponse, ::direct::StatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::direct::StatusResponse>* Direct::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::direct::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Direct::Stub::SensorInfo(::grpc::ClientContext* context, const ::direct::SensorInfoRequest& request, ::direct::SensorInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::direct::SensorInfoRequest, ::direct::SensorInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SensorInfo_, context, request, response);
}

void Direct::Stub::async::SensorInfo(::grpc::ClientContext* context, const ::direct::SensorInfoRequest* request, ::direct::SensorInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::direct::SensorInfoRequest, ::direct::SensorInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SensorInfo_, context, request, response, std::move(f));
}

void Direct::Stub::async::SensorInfo(::grpc::ClientContext* context, const ::direct::SensorInfoRequest* request, ::direct::SensorInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SensorInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::direct::SensorInfoResponse>* Direct::Stub::PrepareAsyncSensorInfoRaw(::grpc::ClientContext* context, const ::direct::SensorInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::direct::SensorInfoResponse, ::direct::SensorInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SensorInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::direct::SensorInfoResponse>* Direct::Stub::AsyncSensorInfoRaw(::grpc::ClientContext* context, const ::direct::SensorInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSensorInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

Direct::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Direct_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Direct::Service, ::direct::InitRequest, ::direct::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Direct::Service* service,
             ::grpc::ServerContext* ctx,
             const ::direct::InitRequest* req,
             ::direct::InitResponse* resp) {
               return service->Init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Direct_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Direct::Service, ::direct::DataRequest, ::direct::DataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Direct::Service* service,
             ::grpc::ServerContext* ctx,
             const ::direct::DataRequest* req,
             ::direct::DataResponse* resp) {
               return service->Data(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Direct_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Direct::Service, ::direct::SettingsRequest, ::direct::SettingsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Direct::Service* service,
             ::grpc::ServerContext* ctx,
             const ::direct::SettingsRequest* req,
             ::direct::SettingsResponse* resp) {
               return service->Settings(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Direct_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Direct::Service, ::direct::CostRequest, ::direct::CostResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Direct::Service* service,
             ::grpc::ServerContext* ctx,
             const ::direct::CostRequest* req,
             ::direct::CostResponse* resp) {
               return service->Cost(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Direct_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Direct::Service, ::direct::NoiseRequest, ::direct::NoiseResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Direct::Service* service,
             ::grpc::ServerContext* ctx,
             const ::direct::NoiseRequest* req,
             ::direct::NoiseResponse* resp) {
               return service->Noise(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Direct_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Direct::Service, ::direct::ResetRequest, ::direct::ResetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Direct::Service* service,
             ::grpc::ServerContext* ctx,
             const ::direct::ResetRequest* req,
             ::direct::ResetResponse* resp) {
               return service->Reset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Direct_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Direct::Service, ::direct::OptimizeRequest, ::direct::OptimizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Direct::Service* service,
             ::grpc::ServerContext* ctx,
             const ::direct::OptimizeRequest* req,
             ::direct::OptimizeResponse* resp) {
               return service->Optimize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Direct_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Direct::Service, ::direct::StatusRequest, ::direct::StatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Direct::Service* service,
             ::grpc::ServerContext* ctx,
             const ::direct::StatusRequest* req,
             ::direct::StatusResponse* resp) {
               return service->Status(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Direct_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Direct::Service, ::direct::SensorInfoRequest, ::direct::SensorInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Direct::Service* service,
             ::grpc::ServerContext* ctx,
             const ::direct::SensorInfoRequest* req,
             ::direct::SensorInfoResponse* resp) {
               return service->SensorInfo(ctx, req, resp);
             }, this)));
}

Direct::Service::~Service() {
}

::grpc::Status Direct::Service::Init(::grpc::ServerContext* context, const ::direct::InitRequest* request, ::direct::InitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Direct::Service::Data(::grpc::ServerContext* context, const ::direct::DataRequest* request, ::direct::DataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Direct::Service::Settings(::grpc::ServerContext* context, const ::direct::SettingsRequest* request, ::direct::SettingsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Direct::Service::Cost(::grpc::ServerContext* context, const ::direct::CostRequest* request, ::direct::CostResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Direct::Service::Noise(::grpc::ServerContext* context, const ::direct::NoiseRequest* request, ::direct::NoiseResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Direct::Service::Reset(::grpc::ServerContext* context, const ::direct::ResetRequest* request, ::direct::ResetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Direct::Service::Optimize(::grpc::ServerContext* context, const ::direct::OptimizeRequest* request, ::direct::OptimizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Direct::Service::Status(::grpc::ServerContext* context, const ::direct::StatusRequest* request, ::direct::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Direct::Service::SensorInfo(::grpc::ServerContext* context, const ::direct::SensorInfoRequest* request, ::direct::SensorInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace direct

