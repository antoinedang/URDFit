// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: direct.proto
// Original file comments:
// Copyright 2023 DeepMind Technologies Limited
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_direct_2eproto__INCLUDED
#define GRPC_direct_2eproto__INCLUDED

#include "direct.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace direct {

class Direct final {
 public:
  static constexpr char const* service_full_name() {
    return "direct.Direct";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Initialize Direct
    virtual ::grpc::Status Init(::grpc::ClientContext* context, const ::direct::InitRequest& request, ::direct::InitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::InitResponse>> AsyncInit(::grpc::ClientContext* context, const ::direct::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::InitResponse>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::InitResponse>> PrepareAsyncInit(::grpc::ClientContext* context, const ::direct::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::InitResponse>>(PrepareAsyncInitRaw(context, request, cq));
    }
    // Set Direct data
    virtual ::grpc::Status Data(::grpc::ClientContext* context, const ::direct::DataRequest& request, ::direct::DataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::DataResponse>> AsyncData(::grpc::ClientContext* context, const ::direct::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::DataResponse>>(AsyncDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::DataResponse>> PrepareAsyncData(::grpc::ClientContext* context, const ::direct::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::DataResponse>>(PrepareAsyncDataRaw(context, request, cq));
    }
    // Direct settings
    virtual ::grpc::Status Settings(::grpc::ClientContext* context, const ::direct::SettingsRequest& request, ::direct::SettingsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::SettingsResponse>> AsyncSettings(::grpc::ClientContext* context, const ::direct::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::SettingsResponse>>(AsyncSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::SettingsResponse>> PrepareAsyncSettings(::grpc::ClientContext* context, const ::direct::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::SettingsResponse>>(PrepareAsyncSettingsRaw(context, request, cq));
    }
    // Direct costs
    virtual ::grpc::Status Cost(::grpc::ClientContext* context, const ::direct::CostRequest& request, ::direct::CostResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::CostResponse>> AsyncCost(::grpc::ClientContext* context, const ::direct::CostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::CostResponse>>(AsyncCostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::CostResponse>> PrepareAsyncCost(::grpc::ClientContext* context, const ::direct::CostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::CostResponse>>(PrepareAsyncCostRaw(context, request, cq));
    }
    // Direct noise (process + sensor)
    virtual ::grpc::Status Noise(::grpc::ClientContext* context, const ::direct::NoiseRequest& request, ::direct::NoiseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::NoiseResponse>> AsyncNoise(::grpc::ClientContext* context, const ::direct::NoiseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::NoiseResponse>>(AsyncNoiseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::NoiseResponse>> PrepareAsyncNoise(::grpc::ClientContext* context, const ::direct::NoiseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::NoiseResponse>>(PrepareAsyncNoiseRaw(context, request, cq));
    }
    // Reset Direct
    virtual ::grpc::Status Reset(::grpc::ClientContext* context, const ::direct::ResetRequest& request, ::direct::ResetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::direct::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::ResetResponse>> PrepareAsyncReset(::grpc::ClientContext* context, const ::direct::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::ResetResponse>>(PrepareAsyncResetRaw(context, request, cq));
    }
    // Optimize Direct
    virtual ::grpc::Status Optimize(::grpc::ClientContext* context, const ::direct::OptimizeRequest& request, ::direct::OptimizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::OptimizeResponse>> AsyncOptimize(::grpc::ClientContext* context, const ::direct::OptimizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::OptimizeResponse>>(AsyncOptimizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::OptimizeResponse>> PrepareAsyncOptimize(::grpc::ClientContext* context, const ::direct::OptimizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::OptimizeResponse>>(PrepareAsyncOptimizeRaw(context, request, cq));
    }
    // Get Direct status
    virtual ::grpc::Status Status(::grpc::ClientContext* context, const ::direct::StatusRequest& request, ::direct::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::StatusResponse>> AsyncStatus(::grpc::ClientContext* context, const ::direct::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::StatusResponse>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::StatusResponse>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::direct::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::StatusResponse>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    // Sensor dimension info
    virtual ::grpc::Status SensorInfo(::grpc::ClientContext* context, const ::direct::SensorInfoRequest& request, ::direct::SensorInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::SensorInfoResponse>> AsyncSensorInfo(::grpc::ClientContext* context, const ::direct::SensorInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::SensorInfoResponse>>(AsyncSensorInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::SensorInfoResponse>> PrepareAsyncSensorInfo(::grpc::ClientContext* context, const ::direct::SensorInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::direct::SensorInfoResponse>>(PrepareAsyncSensorInfoRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Initialize Direct
      virtual void Init(::grpc::ClientContext* context, const ::direct::InitRequest* request, ::direct::InitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Init(::grpc::ClientContext* context, const ::direct::InitRequest* request, ::direct::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Set Direct data
      virtual void Data(::grpc::ClientContext* context, const ::direct::DataRequest* request, ::direct::DataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Data(::grpc::ClientContext* context, const ::direct::DataRequest* request, ::direct::DataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Direct settings
      virtual void Settings(::grpc::ClientContext* context, const ::direct::SettingsRequest* request, ::direct::SettingsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Settings(::grpc::ClientContext* context, const ::direct::SettingsRequest* request, ::direct::SettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Direct costs
      virtual void Cost(::grpc::ClientContext* context, const ::direct::CostRequest* request, ::direct::CostResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Cost(::grpc::ClientContext* context, const ::direct::CostRequest* request, ::direct::CostResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Direct noise (process + sensor)
      virtual void Noise(::grpc::ClientContext* context, const ::direct::NoiseRequest* request, ::direct::NoiseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Noise(::grpc::ClientContext* context, const ::direct::NoiseRequest* request, ::direct::NoiseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Reset Direct
      virtual void Reset(::grpc::ClientContext* context, const ::direct::ResetRequest* request, ::direct::ResetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::direct::ResetRequest* request, ::direct::ResetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Optimize Direct
      virtual void Optimize(::grpc::ClientContext* context, const ::direct::OptimizeRequest* request, ::direct::OptimizeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Optimize(::grpc::ClientContext* context, const ::direct::OptimizeRequest* request, ::direct::OptimizeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get Direct status
      virtual void Status(::grpc::ClientContext* context, const ::direct::StatusRequest* request, ::direct::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Status(::grpc::ClientContext* context, const ::direct::StatusRequest* request, ::direct::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sensor dimension info
      virtual void SensorInfo(::grpc::ClientContext* context, const ::direct::SensorInfoRequest* request, ::direct::SensorInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SensorInfo(::grpc::ClientContext* context, const ::direct::SensorInfoRequest* request, ::direct::SensorInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::InitResponse>* AsyncInitRaw(::grpc::ClientContext* context, const ::direct::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::InitResponse>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::direct::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::DataResponse>* AsyncDataRaw(::grpc::ClientContext* context, const ::direct::DataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::DataResponse>* PrepareAsyncDataRaw(::grpc::ClientContext* context, const ::direct::DataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::SettingsResponse>* AsyncSettingsRaw(::grpc::ClientContext* context, const ::direct::SettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::SettingsResponse>* PrepareAsyncSettingsRaw(::grpc::ClientContext* context, const ::direct::SettingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::CostResponse>* AsyncCostRaw(::grpc::ClientContext* context, const ::direct::CostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::CostResponse>* PrepareAsyncCostRaw(::grpc::ClientContext* context, const ::direct::CostRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::NoiseResponse>* AsyncNoiseRaw(::grpc::ClientContext* context, const ::direct::NoiseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::NoiseResponse>* PrepareAsyncNoiseRaw(::grpc::ClientContext* context, const ::direct::NoiseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::direct::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::ResetResponse>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::direct::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::OptimizeResponse>* AsyncOptimizeRaw(::grpc::ClientContext* context, const ::direct::OptimizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::OptimizeResponse>* PrepareAsyncOptimizeRaw(::grpc::ClientContext* context, const ::direct::OptimizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::StatusResponse>* AsyncStatusRaw(::grpc::ClientContext* context, const ::direct::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::StatusResponse>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::direct::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::SensorInfoResponse>* AsyncSensorInfoRaw(::grpc::ClientContext* context, const ::direct::SensorInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::direct::SensorInfoResponse>* PrepareAsyncSensorInfoRaw(::grpc::ClientContext* context, const ::direct::SensorInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Init(::grpc::ClientContext* context, const ::direct::InitRequest& request, ::direct::InitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::InitResponse>> AsyncInit(::grpc::ClientContext* context, const ::direct::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::InitResponse>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::InitResponse>> PrepareAsyncInit(::grpc::ClientContext* context, const ::direct::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::InitResponse>>(PrepareAsyncInitRaw(context, request, cq));
    }
    ::grpc::Status Data(::grpc::ClientContext* context, const ::direct::DataRequest& request, ::direct::DataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::DataResponse>> AsyncData(::grpc::ClientContext* context, const ::direct::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::DataResponse>>(AsyncDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::DataResponse>> PrepareAsyncData(::grpc::ClientContext* context, const ::direct::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::DataResponse>>(PrepareAsyncDataRaw(context, request, cq));
    }
    ::grpc::Status Settings(::grpc::ClientContext* context, const ::direct::SettingsRequest& request, ::direct::SettingsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::SettingsResponse>> AsyncSettings(::grpc::ClientContext* context, const ::direct::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::SettingsResponse>>(AsyncSettingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::SettingsResponse>> PrepareAsyncSettings(::grpc::ClientContext* context, const ::direct::SettingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::SettingsResponse>>(PrepareAsyncSettingsRaw(context, request, cq));
    }
    ::grpc::Status Cost(::grpc::ClientContext* context, const ::direct::CostRequest& request, ::direct::CostResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::CostResponse>> AsyncCost(::grpc::ClientContext* context, const ::direct::CostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::CostResponse>>(AsyncCostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::CostResponse>> PrepareAsyncCost(::grpc::ClientContext* context, const ::direct::CostRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::CostResponse>>(PrepareAsyncCostRaw(context, request, cq));
    }
    ::grpc::Status Noise(::grpc::ClientContext* context, const ::direct::NoiseRequest& request, ::direct::NoiseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::NoiseResponse>> AsyncNoise(::grpc::ClientContext* context, const ::direct::NoiseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::NoiseResponse>>(AsyncNoiseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::NoiseResponse>> PrepareAsyncNoise(::grpc::ClientContext* context, const ::direct::NoiseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::NoiseResponse>>(PrepareAsyncNoiseRaw(context, request, cq));
    }
    ::grpc::Status Reset(::grpc::ClientContext* context, const ::direct::ResetRequest& request, ::direct::ResetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::direct::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::ResetResponse>> PrepareAsyncReset(::grpc::ClientContext* context, const ::direct::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::ResetResponse>>(PrepareAsyncResetRaw(context, request, cq));
    }
    ::grpc::Status Optimize(::grpc::ClientContext* context, const ::direct::OptimizeRequest& request, ::direct::OptimizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::OptimizeResponse>> AsyncOptimize(::grpc::ClientContext* context, const ::direct::OptimizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::OptimizeResponse>>(AsyncOptimizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::OptimizeResponse>> PrepareAsyncOptimize(::grpc::ClientContext* context, const ::direct::OptimizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::OptimizeResponse>>(PrepareAsyncOptimizeRaw(context, request, cq));
    }
    ::grpc::Status Status(::grpc::ClientContext* context, const ::direct::StatusRequest& request, ::direct::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::StatusResponse>> AsyncStatus(::grpc::ClientContext* context, const ::direct::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::StatusResponse>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::StatusResponse>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::direct::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::StatusResponse>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    ::grpc::Status SensorInfo(::grpc::ClientContext* context, const ::direct::SensorInfoRequest& request, ::direct::SensorInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::SensorInfoResponse>> AsyncSensorInfo(::grpc::ClientContext* context, const ::direct::SensorInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::SensorInfoResponse>>(AsyncSensorInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::SensorInfoResponse>> PrepareAsyncSensorInfo(::grpc::ClientContext* context, const ::direct::SensorInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::direct::SensorInfoResponse>>(PrepareAsyncSensorInfoRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Init(::grpc::ClientContext* context, const ::direct::InitRequest* request, ::direct::InitResponse* response, std::function<void(::grpc::Status)>) override;
      void Init(::grpc::ClientContext* context, const ::direct::InitRequest* request, ::direct::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Data(::grpc::ClientContext* context, const ::direct::DataRequest* request, ::direct::DataResponse* response, std::function<void(::grpc::Status)>) override;
      void Data(::grpc::ClientContext* context, const ::direct::DataRequest* request, ::direct::DataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Settings(::grpc::ClientContext* context, const ::direct::SettingsRequest* request, ::direct::SettingsResponse* response, std::function<void(::grpc::Status)>) override;
      void Settings(::grpc::ClientContext* context, const ::direct::SettingsRequest* request, ::direct::SettingsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Cost(::grpc::ClientContext* context, const ::direct::CostRequest* request, ::direct::CostResponse* response, std::function<void(::grpc::Status)>) override;
      void Cost(::grpc::ClientContext* context, const ::direct::CostRequest* request, ::direct::CostResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Noise(::grpc::ClientContext* context, const ::direct::NoiseRequest* request, ::direct::NoiseResponse* response, std::function<void(::grpc::Status)>) override;
      void Noise(::grpc::ClientContext* context, const ::direct::NoiseRequest* request, ::direct::NoiseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Reset(::grpc::ClientContext* context, const ::direct::ResetRequest* request, ::direct::ResetResponse* response, std::function<void(::grpc::Status)>) override;
      void Reset(::grpc::ClientContext* context, const ::direct::ResetRequest* request, ::direct::ResetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Optimize(::grpc::ClientContext* context, const ::direct::OptimizeRequest* request, ::direct::OptimizeResponse* response, std::function<void(::grpc::Status)>) override;
      void Optimize(::grpc::ClientContext* context, const ::direct::OptimizeRequest* request, ::direct::OptimizeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Status(::grpc::ClientContext* context, const ::direct::StatusRequest* request, ::direct::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void Status(::grpc::ClientContext* context, const ::direct::StatusRequest* request, ::direct::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SensorInfo(::grpc::ClientContext* context, const ::direct::SensorInfoRequest* request, ::direct::SensorInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void SensorInfo(::grpc::ClientContext* context, const ::direct::SensorInfoRequest* request, ::direct::SensorInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::direct::InitResponse>* AsyncInitRaw(::grpc::ClientContext* context, const ::direct::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::InitResponse>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::direct::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::DataResponse>* AsyncDataRaw(::grpc::ClientContext* context, const ::direct::DataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::DataResponse>* PrepareAsyncDataRaw(::grpc::ClientContext* context, const ::direct::DataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::SettingsResponse>* AsyncSettingsRaw(::grpc::ClientContext* context, const ::direct::SettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::SettingsResponse>* PrepareAsyncSettingsRaw(::grpc::ClientContext* context, const ::direct::SettingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::CostResponse>* AsyncCostRaw(::grpc::ClientContext* context, const ::direct::CostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::CostResponse>* PrepareAsyncCostRaw(::grpc::ClientContext* context, const ::direct::CostRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::NoiseResponse>* AsyncNoiseRaw(::grpc::ClientContext* context, const ::direct::NoiseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::NoiseResponse>* PrepareAsyncNoiseRaw(::grpc::ClientContext* context, const ::direct::NoiseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::direct::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::ResetResponse>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::direct::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::OptimizeResponse>* AsyncOptimizeRaw(::grpc::ClientContext* context, const ::direct::OptimizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::OptimizeResponse>* PrepareAsyncOptimizeRaw(::grpc::ClientContext* context, const ::direct::OptimizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::StatusResponse>* AsyncStatusRaw(::grpc::ClientContext* context, const ::direct::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::StatusResponse>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::direct::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::SensorInfoResponse>* AsyncSensorInfoRaw(::grpc::ClientContext* context, const ::direct::SensorInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::direct::SensorInfoResponse>* PrepareAsyncSensorInfoRaw(::grpc::ClientContext* context, const ::direct::SensorInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Init_;
    const ::grpc::internal::RpcMethod rpcmethod_Data_;
    const ::grpc::internal::RpcMethod rpcmethod_Settings_;
    const ::grpc::internal::RpcMethod rpcmethod_Cost_;
    const ::grpc::internal::RpcMethod rpcmethod_Noise_;
    const ::grpc::internal::RpcMethod rpcmethod_Reset_;
    const ::grpc::internal::RpcMethod rpcmethod_Optimize_;
    const ::grpc::internal::RpcMethod rpcmethod_Status_;
    const ::grpc::internal::RpcMethod rpcmethod_SensorInfo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Initialize Direct
    virtual ::grpc::Status Init(::grpc::ServerContext* context, const ::direct::InitRequest* request, ::direct::InitResponse* response);
    // Set Direct data
    virtual ::grpc::Status Data(::grpc::ServerContext* context, const ::direct::DataRequest* request, ::direct::DataResponse* response);
    // Direct settings
    virtual ::grpc::Status Settings(::grpc::ServerContext* context, const ::direct::SettingsRequest* request, ::direct::SettingsResponse* response);
    // Direct costs
    virtual ::grpc::Status Cost(::grpc::ServerContext* context, const ::direct::CostRequest* request, ::direct::CostResponse* response);
    // Direct noise (process + sensor)
    virtual ::grpc::Status Noise(::grpc::ServerContext* context, const ::direct::NoiseRequest* request, ::direct::NoiseResponse* response);
    // Reset Direct
    virtual ::grpc::Status Reset(::grpc::ServerContext* context, const ::direct::ResetRequest* request, ::direct::ResetResponse* response);
    // Optimize Direct
    virtual ::grpc::Status Optimize(::grpc::ServerContext* context, const ::direct::OptimizeRequest* request, ::direct::OptimizeResponse* response);
    // Get Direct status
    virtual ::grpc::Status Status(::grpc::ServerContext* context, const ::direct::StatusRequest* request, ::direct::StatusResponse* response);
    // Sensor dimension info
    virtual ::grpc::Status SensorInfo(::grpc::ServerContext* context, const ::direct::SensorInfoRequest* request, ::direct::SensorInfoResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Init() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::direct::InitRequest* /*request*/, ::direct::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::direct::InitRequest* request, ::grpc::ServerAsyncResponseWriter< ::direct::InitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Data() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Data(::grpc::ServerContext* /*context*/, const ::direct::DataRequest* /*request*/, ::direct::DataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestData(::grpc::ServerContext* context, ::direct::DataRequest* request, ::grpc::ServerAsyncResponseWriter< ::direct::DataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Settings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Settings() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Settings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Settings(::grpc::ServerContext* /*context*/, const ::direct::SettingsRequest* /*request*/, ::direct::SettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSettings(::grpc::ServerContext* context, ::direct::SettingsRequest* request, ::grpc::ServerAsyncResponseWriter< ::direct::SettingsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Cost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Cost() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Cost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cost(::grpc::ServerContext* /*context*/, const ::direct::CostRequest* /*request*/, ::direct::CostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCost(::grpc::ServerContext* context, ::direct::CostRequest* request, ::grpc::ServerAsyncResponseWriter< ::direct::CostResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Noise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Noise() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Noise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Noise(::grpc::ServerContext* /*context*/, const ::direct::NoiseRequest* /*request*/, ::direct::NoiseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNoise(::grpc::ServerContext* context, ::direct::NoiseRequest* request, ::grpc::ServerAsyncResponseWriter< ::direct::NoiseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Reset() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::direct::ResetRequest* /*request*/, ::direct::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::direct::ResetRequest* request, ::grpc::ServerAsyncResponseWriter< ::direct::ResetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Optimize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Optimize() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Optimize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Optimize(::grpc::ServerContext* /*context*/, const ::direct::OptimizeRequest* /*request*/, ::direct::OptimizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOptimize(::grpc::ServerContext* context, ::direct::OptimizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::direct::OptimizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Status() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::direct::StatusRequest* /*request*/, ::direct::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::direct::StatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::direct::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SensorInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SensorInfo() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SensorInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SensorInfo(::grpc::ServerContext* /*context*/, const ::direct::SensorInfoRequest* /*request*/, ::direct::SensorInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSensorInfo(::grpc::ServerContext* context, ::direct::SensorInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::direct::SensorInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Init<WithAsyncMethod_Data<WithAsyncMethod_Settings<WithAsyncMethod_Cost<WithAsyncMethod_Noise<WithAsyncMethod_Reset<WithAsyncMethod_Optimize<WithAsyncMethod_Status<WithAsyncMethod_SensorInfo<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Init() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::direct::InitRequest, ::direct::InitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::direct::InitRequest* request, ::direct::InitResponse* response) { return this->Init(context, request, response); }));}
    void SetMessageAllocatorFor_Init(
        ::grpc::MessageAllocator< ::direct::InitRequest, ::direct::InitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::direct::InitRequest, ::direct::InitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::direct::InitRequest* /*request*/, ::direct::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init(
      ::grpc::CallbackServerContext* /*context*/, const ::direct::InitRequest* /*request*/, ::direct::InitResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Data() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::direct::DataRequest, ::direct::DataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::direct::DataRequest* request, ::direct::DataResponse* response) { return this->Data(context, request, response); }));}
    void SetMessageAllocatorFor_Data(
        ::grpc::MessageAllocator< ::direct::DataRequest, ::direct::DataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::direct::DataRequest, ::direct::DataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Data(::grpc::ServerContext* /*context*/, const ::direct::DataRequest* /*request*/, ::direct::DataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Data(
      ::grpc::CallbackServerContext* /*context*/, const ::direct::DataRequest* /*request*/, ::direct::DataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Settings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Settings() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::direct::SettingsRequest, ::direct::SettingsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::direct::SettingsRequest* request, ::direct::SettingsResponse* response) { return this->Settings(context, request, response); }));}
    void SetMessageAllocatorFor_Settings(
        ::grpc::MessageAllocator< ::direct::SettingsRequest, ::direct::SettingsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::direct::SettingsRequest, ::direct::SettingsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Settings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Settings(::grpc::ServerContext* /*context*/, const ::direct::SettingsRequest* /*request*/, ::direct::SettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Settings(
      ::grpc::CallbackServerContext* /*context*/, const ::direct::SettingsRequest* /*request*/, ::direct::SettingsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Cost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Cost() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::direct::CostRequest, ::direct::CostResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::direct::CostRequest* request, ::direct::CostResponse* response) { return this->Cost(context, request, response); }));}
    void SetMessageAllocatorFor_Cost(
        ::grpc::MessageAllocator< ::direct::CostRequest, ::direct::CostResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::direct::CostRequest, ::direct::CostResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Cost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cost(::grpc::ServerContext* /*context*/, const ::direct::CostRequest* /*request*/, ::direct::CostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Cost(
      ::grpc::CallbackServerContext* /*context*/, const ::direct::CostRequest* /*request*/, ::direct::CostResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Noise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Noise() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::direct::NoiseRequest, ::direct::NoiseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::direct::NoiseRequest* request, ::direct::NoiseResponse* response) { return this->Noise(context, request, response); }));}
    void SetMessageAllocatorFor_Noise(
        ::grpc::MessageAllocator< ::direct::NoiseRequest, ::direct::NoiseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::direct::NoiseRequest, ::direct::NoiseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Noise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Noise(::grpc::ServerContext* /*context*/, const ::direct::NoiseRequest* /*request*/, ::direct::NoiseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Noise(
      ::grpc::CallbackServerContext* /*context*/, const ::direct::NoiseRequest* /*request*/, ::direct::NoiseResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Reset() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::direct::ResetRequest, ::direct::ResetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::direct::ResetRequest* request, ::direct::ResetResponse* response) { return this->Reset(context, request, response); }));}
    void SetMessageAllocatorFor_Reset(
        ::grpc::MessageAllocator< ::direct::ResetRequest, ::direct::ResetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::direct::ResetRequest, ::direct::ResetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::direct::ResetRequest* /*request*/, ::direct::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Reset(
      ::grpc::CallbackServerContext* /*context*/, const ::direct::ResetRequest* /*request*/, ::direct::ResetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Optimize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Optimize() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::direct::OptimizeRequest, ::direct::OptimizeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::direct::OptimizeRequest* request, ::direct::OptimizeResponse* response) { return this->Optimize(context, request, response); }));}
    void SetMessageAllocatorFor_Optimize(
        ::grpc::MessageAllocator< ::direct::OptimizeRequest, ::direct::OptimizeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::direct::OptimizeRequest, ::direct::OptimizeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Optimize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Optimize(::grpc::ServerContext* /*context*/, const ::direct::OptimizeRequest* /*request*/, ::direct::OptimizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Optimize(
      ::grpc::CallbackServerContext* /*context*/, const ::direct::OptimizeRequest* /*request*/, ::direct::OptimizeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Status() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::direct::StatusRequest, ::direct::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::direct::StatusRequest* request, ::direct::StatusResponse* response) { return this->Status(context, request, response); }));}
    void SetMessageAllocatorFor_Status(
        ::grpc::MessageAllocator< ::direct::StatusRequest, ::direct::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::direct::StatusRequest, ::direct::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::direct::StatusRequest* /*request*/, ::direct::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::direct::StatusRequest* /*request*/, ::direct::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SensorInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SensorInfo() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::direct::SensorInfoRequest, ::direct::SensorInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::direct::SensorInfoRequest* request, ::direct::SensorInfoResponse* response) { return this->SensorInfo(context, request, response); }));}
    void SetMessageAllocatorFor_SensorInfo(
        ::grpc::MessageAllocator< ::direct::SensorInfoRequest, ::direct::SensorInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::direct::SensorInfoRequest, ::direct::SensorInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SensorInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SensorInfo(::grpc::ServerContext* /*context*/, const ::direct::SensorInfoRequest* /*request*/, ::direct::SensorInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SensorInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::direct::SensorInfoRequest* /*request*/, ::direct::SensorInfoResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Init<WithCallbackMethod_Data<WithCallbackMethod_Settings<WithCallbackMethod_Cost<WithCallbackMethod_Noise<WithCallbackMethod_Reset<WithCallbackMethod_Optimize<WithCallbackMethod_Status<WithCallbackMethod_SensorInfo<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Init() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::direct::InitRequest* /*request*/, ::direct::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Data() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Data(::grpc::ServerContext* /*context*/, const ::direct::DataRequest* /*request*/, ::direct::DataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Settings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Settings() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Settings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Settings(::grpc::ServerContext* /*context*/, const ::direct::SettingsRequest* /*request*/, ::direct::SettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Cost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Cost() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Cost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cost(::grpc::ServerContext* /*context*/, const ::direct::CostRequest* /*request*/, ::direct::CostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Noise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Noise() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Noise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Noise(::grpc::ServerContext* /*context*/, const ::direct::NoiseRequest* /*request*/, ::direct::NoiseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Reset() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::direct::ResetRequest* /*request*/, ::direct::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Optimize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Optimize() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Optimize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Optimize(::grpc::ServerContext* /*context*/, const ::direct::OptimizeRequest* /*request*/, ::direct::OptimizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Status() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::direct::StatusRequest* /*request*/, ::direct::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SensorInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SensorInfo() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SensorInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SensorInfo(::grpc::ServerContext* /*context*/, const ::direct::SensorInfoRequest* /*request*/, ::direct::SensorInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Init() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::direct::InitRequest* /*request*/, ::direct::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Data() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Data(::grpc::ServerContext* /*context*/, const ::direct::DataRequest* /*request*/, ::direct::DataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Settings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Settings() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Settings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Settings(::grpc::ServerContext* /*context*/, const ::direct::SettingsRequest* /*request*/, ::direct::SettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSettings(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Cost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Cost() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Cost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cost(::grpc::ServerContext* /*context*/, const ::direct::CostRequest* /*request*/, ::direct::CostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCost(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Noise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Noise() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Noise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Noise(::grpc::ServerContext* /*context*/, const ::direct::NoiseRequest* /*request*/, ::direct::NoiseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNoise(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Reset() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::direct::ResetRequest* /*request*/, ::direct::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Optimize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Optimize() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Optimize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Optimize(::grpc::ServerContext* /*context*/, const ::direct::OptimizeRequest* /*request*/, ::direct::OptimizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOptimize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Status() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::direct::StatusRequest* /*request*/, ::direct::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SensorInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SensorInfo() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SensorInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SensorInfo(::grpc::ServerContext* /*context*/, const ::direct::SensorInfoRequest* /*request*/, ::direct::SensorInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSensorInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Init() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Init(context, request, response); }));
    }
    ~WithRawCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::direct::InitRequest* /*request*/, ::direct::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Data() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Data(context, request, response); }));
    }
    ~WithRawCallbackMethod_Data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Data(::grpc::ServerContext* /*context*/, const ::direct::DataRequest* /*request*/, ::direct::DataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Data(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Settings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Settings() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Settings(context, request, response); }));
    }
    ~WithRawCallbackMethod_Settings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Settings(::grpc::ServerContext* /*context*/, const ::direct::SettingsRequest* /*request*/, ::direct::SettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Settings(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Cost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Cost() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Cost(context, request, response); }));
    }
    ~WithRawCallbackMethod_Cost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Cost(::grpc::ServerContext* /*context*/, const ::direct::CostRequest* /*request*/, ::direct::CostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Cost(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Noise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Noise() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Noise(context, request, response); }));
    }
    ~WithRawCallbackMethod_Noise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Noise(::grpc::ServerContext* /*context*/, const ::direct::NoiseRequest* /*request*/, ::direct::NoiseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Noise(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Reset() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Reset(context, request, response); }));
    }
    ~WithRawCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::direct::ResetRequest* /*request*/, ::direct::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Reset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Optimize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Optimize() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Optimize(context, request, response); }));
    }
    ~WithRawCallbackMethod_Optimize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Optimize(::grpc::ServerContext* /*context*/, const ::direct::OptimizeRequest* /*request*/, ::direct::OptimizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Optimize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Status() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Status(context, request, response); }));
    }
    ~WithRawCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::direct::StatusRequest* /*request*/, ::direct::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SensorInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SensorInfo() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SensorInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_SensorInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SensorInfo(::grpc::ServerContext* /*context*/, const ::direct::SensorInfoRequest* /*request*/, ::direct::SensorInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SensorInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Init() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::direct::InitRequest, ::direct::InitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::direct::InitRequest, ::direct::InitResponse>* streamer) {
                       return this->StreamedInit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::direct::InitRequest* /*request*/, ::direct::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::direct::InitRequest,::direct::InitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Data : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Data() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::direct::DataRequest, ::direct::DataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::direct::DataRequest, ::direct::DataResponse>* streamer) {
                       return this->StreamedData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Data() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Data(::grpc::ServerContext* /*context*/, const ::direct::DataRequest* /*request*/, ::direct::DataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::direct::DataRequest,::direct::DataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Settings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Settings() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::direct::SettingsRequest, ::direct::SettingsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::direct::SettingsRequest, ::direct::SettingsResponse>* streamer) {
                       return this->StreamedSettings(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Settings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Settings(::grpc::ServerContext* /*context*/, const ::direct::SettingsRequest* /*request*/, ::direct::SettingsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSettings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::direct::SettingsRequest,::direct::SettingsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Cost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Cost() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::direct::CostRequest, ::direct::CostResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::direct::CostRequest, ::direct::CostResponse>* streamer) {
                       return this->StreamedCost(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Cost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Cost(::grpc::ServerContext* /*context*/, const ::direct::CostRequest* /*request*/, ::direct::CostResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCost(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::direct::CostRequest,::direct::CostResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Noise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Noise() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::direct::NoiseRequest, ::direct::NoiseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::direct::NoiseRequest, ::direct::NoiseResponse>* streamer) {
                       return this->StreamedNoise(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Noise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Noise(::grpc::ServerContext* /*context*/, const ::direct::NoiseRequest* /*request*/, ::direct::NoiseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNoise(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::direct::NoiseRequest,::direct::NoiseResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Reset() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::direct::ResetRequest, ::direct::ResetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::direct::ResetRequest, ::direct::ResetResponse>* streamer) {
                       return this->StreamedReset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::direct::ResetRequest* /*request*/, ::direct::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::direct::ResetRequest,::direct::ResetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Optimize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Optimize() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::direct::OptimizeRequest, ::direct::OptimizeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::direct::OptimizeRequest, ::direct::OptimizeResponse>* streamer) {
                       return this->StreamedOptimize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Optimize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Optimize(::grpc::ServerContext* /*context*/, const ::direct::OptimizeRequest* /*request*/, ::direct::OptimizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOptimize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::direct::OptimizeRequest,::direct::OptimizeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Status() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::direct::StatusRequest, ::direct::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::direct::StatusRequest, ::direct::StatusResponse>* streamer) {
                       return this->StreamedStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::direct::StatusRequest* /*request*/, ::direct::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::direct::StatusRequest,::direct::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SensorInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SensorInfo() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::direct::SensorInfoRequest, ::direct::SensorInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::direct::SensorInfoRequest, ::direct::SensorInfoResponse>* streamer) {
                       return this->StreamedSensorInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SensorInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SensorInfo(::grpc::ServerContext* /*context*/, const ::direct::SensorInfoRequest* /*request*/, ::direct::SensorInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSensorInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::direct::SensorInfoRequest,::direct::SensorInfoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_Data<WithStreamedUnaryMethod_Settings<WithStreamedUnaryMethod_Cost<WithStreamedUnaryMethod_Noise<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_Optimize<WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_SensorInfo<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_Data<WithStreamedUnaryMethod_Settings<WithStreamedUnaryMethod_Cost<WithStreamedUnaryMethod_Noise<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_Optimize<WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_SensorInfo<Service > > > > > > > > > StreamedService;
};

}  // namespace direct


#endif  // GRPC_direct_2eproto__INCLUDED
