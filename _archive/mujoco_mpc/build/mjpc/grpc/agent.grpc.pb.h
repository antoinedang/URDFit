// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: agent.proto
// Original file comments:
// Copyright 2023 DeepMind Technologies Limited
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_agent_2eproto__INCLUDED
#define GRPC_agent_2eproto__INCLUDED

#include "agent.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace agent {

class Agent final {
 public:
  static constexpr char const* service_full_name() {
    return "agent.Agent";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Initialize MJPC Agent.
    virtual ::grpc::Status Init(::grpc::ClientContext* context, const ::agent::InitRequest& request, ::agent::InitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::InitResponse>> AsyncInit(::grpc::ClientContext* context, const ::agent::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::InitResponse>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::InitResponse>> PrepareAsyncInit(::grpc::ClientContext* context, const ::agent::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::InitResponse>>(PrepareAsyncInitRaw(context, request, cq));
    }
    // Get the simulation state.
    virtual ::grpc::Status GetState(::grpc::ClientContext* context, const ::agent::GetStateRequest& request, ::agent::GetStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetStateResponse>> AsyncGetState(::grpc::ClientContext* context, const ::agent::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetStateResponse>>(AsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetStateResponse>> PrepareAsyncGetState(::grpc::ClientContext* context, const ::agent::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetStateResponse>>(PrepareAsyncGetStateRaw(context, request, cq));
    }
    // Set state of the MJPC Agent.
    virtual ::grpc::Status SetState(::grpc::ClientContext* context, const ::agent::SetStateRequest& request, ::agent::SetStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetStateResponse>> AsyncSetState(::grpc::ClientContext* context, const ::agent::SetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetStateResponse>>(AsyncSetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetStateResponse>> PrepareAsyncSetState(::grpc::ClientContext* context, const ::agent::SetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetStateResponse>>(PrepareAsyncSetStateRaw(context, request, cq));
    }
    // Get the current action from the Agent.
    virtual ::grpc::Status GetAction(::grpc::ClientContext* context, const ::agent::GetActionRequest& request, ::agent::GetActionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetActionResponse>> AsyncGetAction(::grpc::ClientContext* context, const ::agent::GetActionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetActionResponse>>(AsyncGetActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetActionResponse>> PrepareAsyncGetAction(::grpc::ClientContext* context, const ::agent::GetActionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetActionResponse>>(PrepareAsyncGetActionRaw(context, request, cq));
    }
    // Compute one plan step.
    virtual ::grpc::Status PlannerStep(::grpc::ClientContext* context, const ::agent::PlannerStepRequest& request, ::agent::PlannerStepResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::PlannerStepResponse>> AsyncPlannerStep(::grpc::ClientContext* context, const ::agent::PlannerStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::PlannerStepResponse>>(AsyncPlannerStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::PlannerStepResponse>> PrepareAsyncPlannerStep(::grpc::ClientContext* context, const ::agent::PlannerStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::PlannerStepResponse>>(PrepareAsyncPlannerStepRaw(context, request, cq));
    }
    // Step physics once, using actions from the planner.
    virtual ::grpc::Status Step(::grpc::ClientContext* context, const ::agent::StepRequest& request, ::agent::StepResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::StepResponse>> AsyncStep(::grpc::ClientContext* context, const ::agent::StepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::StepResponse>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::StepResponse>> PrepareAsyncStep(::grpc::ClientContext* context, const ::agent::StepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::StepResponse>>(PrepareAsyncStepRaw(context, request, cq));
    }
    // Reset the Agent.
    virtual ::grpc::Status Reset(::grpc::ClientContext* context, const ::agent::ResetRequest& request, ::agent::ResetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::agent::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::ResetResponse>> PrepareAsyncReset(::grpc::ClientContext* context, const ::agent::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::ResetResponse>>(PrepareAsyncResetRaw(context, request, cq));
    }
    // Set a task parameters.
    virtual ::grpc::Status SetTaskParameters(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest& request, ::agent::SetTaskParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetTaskParametersResponse>> AsyncSetTaskParameters(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetTaskParametersResponse>>(AsyncSetTaskParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetTaskParametersResponse>> PrepareAsyncSetTaskParameters(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetTaskParametersResponse>>(PrepareAsyncSetTaskParametersRaw(context, request, cq));
    }
    // Get a task parameters.
    virtual ::grpc::Status GetTaskParameters(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest& request, ::agent::GetTaskParametersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetTaskParametersResponse>> AsyncGetTaskParameters(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetTaskParametersResponse>>(AsyncGetTaskParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetTaskParametersResponse>> PrepareAsyncGetTaskParameters(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetTaskParametersResponse>>(PrepareAsyncGetTaskParametersRaw(context, request, cq));
    }
    // Set cost weights.
    virtual ::grpc::Status SetCostWeights(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest& request, ::agent::SetCostWeightsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetCostWeightsResponse>> AsyncSetCostWeights(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetCostWeightsResponse>>(AsyncSetCostWeightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetCostWeightsResponse>> PrepareAsyncSetCostWeights(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetCostWeightsResponse>>(PrepareAsyncSetCostWeightsRaw(context, request, cq));
    }
    // Get cost term residuals.
    virtual ::grpc::Status GetResiduals(::grpc::ClientContext* context, const ::agent::GetResidualsRequest& request, ::agent::GetResidualsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetResidualsResponse>> AsyncGetResiduals(::grpc::ClientContext* context, const ::agent::GetResidualsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetResidualsResponse>>(AsyncGetResidualsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetResidualsResponse>> PrepareAsyncGetResiduals(::grpc::ClientContext* context, const ::agent::GetResidualsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetResidualsResponse>>(PrepareAsyncGetResidualsRaw(context, request, cq));
    }
    // Get cost term values.
    virtual ::grpc::Status GetCostValuesAndWeights(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest& request, ::agent::GetCostValuesAndWeightsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetCostValuesAndWeightsResponse>> AsyncGetCostValuesAndWeights(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetCostValuesAndWeightsResponse>>(AsyncGetCostValuesAndWeightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetCostValuesAndWeightsResponse>> PrepareAsyncGetCostValuesAndWeights(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetCostValuesAndWeightsResponse>>(PrepareAsyncGetCostValuesAndWeightsRaw(context, request, cq));
    }
    // Set mode.
    virtual ::grpc::Status SetMode(::grpc::ClientContext* context, const ::agent::SetModeRequest& request, ::agent::SetModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetModeResponse>> AsyncSetMode(::grpc::ClientContext* context, const ::agent::SetModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetModeResponse>>(AsyncSetModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetModeResponse>> PrepareAsyncSetMode(::grpc::ClientContext* context, const ::agent::SetModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetModeResponse>>(PrepareAsyncSetModeRaw(context, request, cq));
    }
    // Get mode.
    virtual ::grpc::Status GetMode(::grpc::ClientContext* context, const ::agent::GetModeRequest& request, ::agent::GetModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetModeResponse>> AsyncGetMode(::grpc::ClientContext* context, const ::agent::GetModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetModeResponse>>(AsyncGetModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetModeResponse>> PrepareAsyncGetMode(::grpc::ClientContext* context, const ::agent::GetModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetModeResponse>>(PrepareAsyncGetModeRaw(context, request, cq));
    }
    // Get all modes.
    virtual ::grpc::Status GetAllModes(::grpc::ClientContext* context, const ::agent::GetAllModesRequest& request, ::agent::GetAllModesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetAllModesResponse>> AsyncGetAllModes(::grpc::ClientContext* context, const ::agent::GetAllModesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetAllModesResponse>>(AsyncGetAllModesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetAllModesResponse>> PrepareAsyncGetAllModes(::grpc::ClientContext* context, const ::agent::GetAllModesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetAllModesResponse>>(PrepareAsyncGetAllModesRaw(context, request, cq));
    }
    // Get best trajectory (states, actions, times).
    virtual ::grpc::Status GetBestTrajectory(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest& request, ::agent::GetBestTrajectoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetBestTrajectoryResponse>> AsyncGetBestTrajectory(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetBestTrajectoryResponse>>(AsyncGetBestTrajectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetBestTrajectoryResponse>> PrepareAsyncGetBestTrajectory(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetBestTrajectoryResponse>>(PrepareAsyncGetBestTrajectoryRaw(context, request, cq));
    }
    // A single method that can set many of the inputs.
    virtual ::grpc::Status SetAnything(::grpc::ClientContext* context, const ::agent::SetAnythingRequest& request, ::agent::SetAnythingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetAnythingResponse>> AsyncSetAnything(::grpc::ClientContext* context, const ::agent::SetAnythingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetAnythingResponse>>(AsyncSetAnythingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetAnythingResponse>> PrepareAsyncSetAnything(::grpc::ClientContext* context, const ::agent::SetAnythingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetAnythingResponse>>(PrepareAsyncSetAnythingRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Initialize MJPC Agent.
      virtual void Init(::grpc::ClientContext* context, const ::agent::InitRequest* request, ::agent::InitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Init(::grpc::ClientContext* context, const ::agent::InitRequest* request, ::agent::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get the simulation state.
      virtual void GetState(::grpc::ClientContext* context, const ::agent::GetStateRequest* request, ::agent::GetStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetState(::grpc::ClientContext* context, const ::agent::GetStateRequest* request, ::agent::GetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Set state of the MJPC Agent.
      virtual void SetState(::grpc::ClientContext* context, const ::agent::SetStateRequest* request, ::agent::SetStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetState(::grpc::ClientContext* context, const ::agent::SetStateRequest* request, ::agent::SetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get the current action from the Agent.
      virtual void GetAction(::grpc::ClientContext* context, const ::agent::GetActionRequest* request, ::agent::GetActionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAction(::grpc::ClientContext* context, const ::agent::GetActionRequest* request, ::agent::GetActionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Compute one plan step.
      virtual void PlannerStep(::grpc::ClientContext* context, const ::agent::PlannerStepRequest* request, ::agent::PlannerStepResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PlannerStep(::grpc::ClientContext* context, const ::agent::PlannerStepRequest* request, ::agent::PlannerStepResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Step physics once, using actions from the planner.
      virtual void Step(::grpc::ClientContext* context, const ::agent::StepRequest* request, ::agent::StepResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Step(::grpc::ClientContext* context, const ::agent::StepRequest* request, ::agent::StepResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Reset the Agent.
      virtual void Reset(::grpc::ClientContext* context, const ::agent::ResetRequest* request, ::agent::ResetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::agent::ResetRequest* request, ::agent::ResetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Set a task parameters.
      virtual void SetTaskParameters(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest* request, ::agent::SetTaskParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTaskParameters(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest* request, ::agent::SetTaskParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a task parameters.
      virtual void GetTaskParameters(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest* request, ::agent::GetTaskParametersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTaskParameters(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest* request, ::agent::GetTaskParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Set cost weights.
      virtual void SetCostWeights(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest* request, ::agent::SetCostWeightsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCostWeights(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest* request, ::agent::SetCostWeightsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get cost term residuals.
      virtual void GetResiduals(::grpc::ClientContext* context, const ::agent::GetResidualsRequest* request, ::agent::GetResidualsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetResiduals(::grpc::ClientContext* context, const ::agent::GetResidualsRequest* request, ::agent::GetResidualsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get cost term values.
      virtual void GetCostValuesAndWeights(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest* request, ::agent::GetCostValuesAndWeightsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCostValuesAndWeights(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest* request, ::agent::GetCostValuesAndWeightsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Set mode.
      virtual void SetMode(::grpc::ClientContext* context, const ::agent::SetModeRequest* request, ::agent::SetModeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMode(::grpc::ClientContext* context, const ::agent::SetModeRequest* request, ::agent::SetModeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get mode.
      virtual void GetMode(::grpc::ClientContext* context, const ::agent::GetModeRequest* request, ::agent::GetModeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMode(::grpc::ClientContext* context, const ::agent::GetModeRequest* request, ::agent::GetModeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get all modes.
      virtual void GetAllModes(::grpc::ClientContext* context, const ::agent::GetAllModesRequest* request, ::agent::GetAllModesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllModes(::grpc::ClientContext* context, const ::agent::GetAllModesRequest* request, ::agent::GetAllModesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get best trajectory (states, actions, times).
      virtual void GetBestTrajectory(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest* request, ::agent::GetBestTrajectoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBestTrajectory(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest* request, ::agent::GetBestTrajectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // A single method that can set many of the inputs.
      virtual void SetAnything(::grpc::ClientContext* context, const ::agent::SetAnythingRequest* request, ::agent::SetAnythingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAnything(::grpc::ClientContext* context, const ::agent::SetAnythingRequest* request, ::agent::SetAnythingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::InitResponse>* AsyncInitRaw(::grpc::ClientContext* context, const ::agent::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::InitResponse>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::agent::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetStateResponse>* AsyncGetStateRaw(::grpc::ClientContext* context, const ::agent::GetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetStateResponse>* PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::agent::GetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetStateResponse>* AsyncSetStateRaw(::grpc::ClientContext* context, const ::agent::SetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetStateResponse>* PrepareAsyncSetStateRaw(::grpc::ClientContext* context, const ::agent::SetStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetActionResponse>* AsyncGetActionRaw(::grpc::ClientContext* context, const ::agent::GetActionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetActionResponse>* PrepareAsyncGetActionRaw(::grpc::ClientContext* context, const ::agent::GetActionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::PlannerStepResponse>* AsyncPlannerStepRaw(::grpc::ClientContext* context, const ::agent::PlannerStepRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::PlannerStepResponse>* PrepareAsyncPlannerStepRaw(::grpc::ClientContext* context, const ::agent::PlannerStepRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::StepResponse>* AsyncStepRaw(::grpc::ClientContext* context, const ::agent::StepRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::StepResponse>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::agent::StepRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::agent::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::ResetResponse>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::agent::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetTaskParametersResponse>* AsyncSetTaskParametersRaw(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetTaskParametersResponse>* PrepareAsyncSetTaskParametersRaw(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetTaskParametersResponse>* AsyncGetTaskParametersRaw(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetTaskParametersResponse>* PrepareAsyncGetTaskParametersRaw(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetCostWeightsResponse>* AsyncSetCostWeightsRaw(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetCostWeightsResponse>* PrepareAsyncSetCostWeightsRaw(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetResidualsResponse>* AsyncGetResidualsRaw(::grpc::ClientContext* context, const ::agent::GetResidualsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetResidualsResponse>* PrepareAsyncGetResidualsRaw(::grpc::ClientContext* context, const ::agent::GetResidualsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetCostValuesAndWeightsResponse>* AsyncGetCostValuesAndWeightsRaw(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetCostValuesAndWeightsResponse>* PrepareAsyncGetCostValuesAndWeightsRaw(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetModeResponse>* AsyncSetModeRaw(::grpc::ClientContext* context, const ::agent::SetModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetModeResponse>* PrepareAsyncSetModeRaw(::grpc::ClientContext* context, const ::agent::SetModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetModeResponse>* AsyncGetModeRaw(::grpc::ClientContext* context, const ::agent::GetModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetModeResponse>* PrepareAsyncGetModeRaw(::grpc::ClientContext* context, const ::agent::GetModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetAllModesResponse>* AsyncGetAllModesRaw(::grpc::ClientContext* context, const ::agent::GetAllModesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetAllModesResponse>* PrepareAsyncGetAllModesRaw(::grpc::ClientContext* context, const ::agent::GetAllModesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetBestTrajectoryResponse>* AsyncGetBestTrajectoryRaw(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::GetBestTrajectoryResponse>* PrepareAsyncGetBestTrajectoryRaw(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetAnythingResponse>* AsyncSetAnythingRaw(::grpc::ClientContext* context, const ::agent::SetAnythingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agent::SetAnythingResponse>* PrepareAsyncSetAnythingRaw(::grpc::ClientContext* context, const ::agent::SetAnythingRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Init(::grpc::ClientContext* context, const ::agent::InitRequest& request, ::agent::InitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::InitResponse>> AsyncInit(::grpc::ClientContext* context, const ::agent::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::InitResponse>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::InitResponse>> PrepareAsyncInit(::grpc::ClientContext* context, const ::agent::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::InitResponse>>(PrepareAsyncInitRaw(context, request, cq));
    }
    ::grpc::Status GetState(::grpc::ClientContext* context, const ::agent::GetStateRequest& request, ::agent::GetStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetStateResponse>> AsyncGetState(::grpc::ClientContext* context, const ::agent::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetStateResponse>>(AsyncGetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetStateResponse>> PrepareAsyncGetState(::grpc::ClientContext* context, const ::agent::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetStateResponse>>(PrepareAsyncGetStateRaw(context, request, cq));
    }
    ::grpc::Status SetState(::grpc::ClientContext* context, const ::agent::SetStateRequest& request, ::agent::SetStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetStateResponse>> AsyncSetState(::grpc::ClientContext* context, const ::agent::SetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetStateResponse>>(AsyncSetStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetStateResponse>> PrepareAsyncSetState(::grpc::ClientContext* context, const ::agent::SetStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetStateResponse>>(PrepareAsyncSetStateRaw(context, request, cq));
    }
    ::grpc::Status GetAction(::grpc::ClientContext* context, const ::agent::GetActionRequest& request, ::agent::GetActionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetActionResponse>> AsyncGetAction(::grpc::ClientContext* context, const ::agent::GetActionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetActionResponse>>(AsyncGetActionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetActionResponse>> PrepareAsyncGetAction(::grpc::ClientContext* context, const ::agent::GetActionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetActionResponse>>(PrepareAsyncGetActionRaw(context, request, cq));
    }
    ::grpc::Status PlannerStep(::grpc::ClientContext* context, const ::agent::PlannerStepRequest& request, ::agent::PlannerStepResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::PlannerStepResponse>> AsyncPlannerStep(::grpc::ClientContext* context, const ::agent::PlannerStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::PlannerStepResponse>>(AsyncPlannerStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::PlannerStepResponse>> PrepareAsyncPlannerStep(::grpc::ClientContext* context, const ::agent::PlannerStepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::PlannerStepResponse>>(PrepareAsyncPlannerStepRaw(context, request, cq));
    }
    ::grpc::Status Step(::grpc::ClientContext* context, const ::agent::StepRequest& request, ::agent::StepResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::StepResponse>> AsyncStep(::grpc::ClientContext* context, const ::agent::StepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::StepResponse>>(AsyncStepRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::StepResponse>> PrepareAsyncStep(::grpc::ClientContext* context, const ::agent::StepRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::StepResponse>>(PrepareAsyncStepRaw(context, request, cq));
    }
    ::grpc::Status Reset(::grpc::ClientContext* context, const ::agent::ResetRequest& request, ::agent::ResetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::agent::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::ResetResponse>> PrepareAsyncReset(::grpc::ClientContext* context, const ::agent::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::ResetResponse>>(PrepareAsyncResetRaw(context, request, cq));
    }
    ::grpc::Status SetTaskParameters(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest& request, ::agent::SetTaskParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetTaskParametersResponse>> AsyncSetTaskParameters(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetTaskParametersResponse>>(AsyncSetTaskParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetTaskParametersResponse>> PrepareAsyncSetTaskParameters(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetTaskParametersResponse>>(PrepareAsyncSetTaskParametersRaw(context, request, cq));
    }
    ::grpc::Status GetTaskParameters(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest& request, ::agent::GetTaskParametersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetTaskParametersResponse>> AsyncGetTaskParameters(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetTaskParametersResponse>>(AsyncGetTaskParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetTaskParametersResponse>> PrepareAsyncGetTaskParameters(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetTaskParametersResponse>>(PrepareAsyncGetTaskParametersRaw(context, request, cq));
    }
    ::grpc::Status SetCostWeights(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest& request, ::agent::SetCostWeightsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetCostWeightsResponse>> AsyncSetCostWeights(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetCostWeightsResponse>>(AsyncSetCostWeightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetCostWeightsResponse>> PrepareAsyncSetCostWeights(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetCostWeightsResponse>>(PrepareAsyncSetCostWeightsRaw(context, request, cq));
    }
    ::grpc::Status GetResiduals(::grpc::ClientContext* context, const ::agent::GetResidualsRequest& request, ::agent::GetResidualsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetResidualsResponse>> AsyncGetResiduals(::grpc::ClientContext* context, const ::agent::GetResidualsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetResidualsResponse>>(AsyncGetResidualsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetResidualsResponse>> PrepareAsyncGetResiduals(::grpc::ClientContext* context, const ::agent::GetResidualsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetResidualsResponse>>(PrepareAsyncGetResidualsRaw(context, request, cq));
    }
    ::grpc::Status GetCostValuesAndWeights(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest& request, ::agent::GetCostValuesAndWeightsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetCostValuesAndWeightsResponse>> AsyncGetCostValuesAndWeights(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetCostValuesAndWeightsResponse>>(AsyncGetCostValuesAndWeightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetCostValuesAndWeightsResponse>> PrepareAsyncGetCostValuesAndWeights(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetCostValuesAndWeightsResponse>>(PrepareAsyncGetCostValuesAndWeightsRaw(context, request, cq));
    }
    ::grpc::Status SetMode(::grpc::ClientContext* context, const ::agent::SetModeRequest& request, ::agent::SetModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetModeResponse>> AsyncSetMode(::grpc::ClientContext* context, const ::agent::SetModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetModeResponse>>(AsyncSetModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetModeResponse>> PrepareAsyncSetMode(::grpc::ClientContext* context, const ::agent::SetModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetModeResponse>>(PrepareAsyncSetModeRaw(context, request, cq));
    }
    ::grpc::Status GetMode(::grpc::ClientContext* context, const ::agent::GetModeRequest& request, ::agent::GetModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetModeResponse>> AsyncGetMode(::grpc::ClientContext* context, const ::agent::GetModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetModeResponse>>(AsyncGetModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetModeResponse>> PrepareAsyncGetMode(::grpc::ClientContext* context, const ::agent::GetModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetModeResponse>>(PrepareAsyncGetModeRaw(context, request, cq));
    }
    ::grpc::Status GetAllModes(::grpc::ClientContext* context, const ::agent::GetAllModesRequest& request, ::agent::GetAllModesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetAllModesResponse>> AsyncGetAllModes(::grpc::ClientContext* context, const ::agent::GetAllModesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetAllModesResponse>>(AsyncGetAllModesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetAllModesResponse>> PrepareAsyncGetAllModes(::grpc::ClientContext* context, const ::agent::GetAllModesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetAllModesResponse>>(PrepareAsyncGetAllModesRaw(context, request, cq));
    }
    ::grpc::Status GetBestTrajectory(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest& request, ::agent::GetBestTrajectoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetBestTrajectoryResponse>> AsyncGetBestTrajectory(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetBestTrajectoryResponse>>(AsyncGetBestTrajectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetBestTrajectoryResponse>> PrepareAsyncGetBestTrajectory(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::GetBestTrajectoryResponse>>(PrepareAsyncGetBestTrajectoryRaw(context, request, cq));
    }
    ::grpc::Status SetAnything(::grpc::ClientContext* context, const ::agent::SetAnythingRequest& request, ::agent::SetAnythingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetAnythingResponse>> AsyncSetAnything(::grpc::ClientContext* context, const ::agent::SetAnythingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetAnythingResponse>>(AsyncSetAnythingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetAnythingResponse>> PrepareAsyncSetAnything(::grpc::ClientContext* context, const ::agent::SetAnythingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agent::SetAnythingResponse>>(PrepareAsyncSetAnythingRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Init(::grpc::ClientContext* context, const ::agent::InitRequest* request, ::agent::InitResponse* response, std::function<void(::grpc::Status)>) override;
      void Init(::grpc::ClientContext* context, const ::agent::InitRequest* request, ::agent::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetState(::grpc::ClientContext* context, const ::agent::GetStateRequest* request, ::agent::GetStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetState(::grpc::ClientContext* context, const ::agent::GetStateRequest* request, ::agent::GetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetState(::grpc::ClientContext* context, const ::agent::SetStateRequest* request, ::agent::SetStateResponse* response, std::function<void(::grpc::Status)>) override;
      void SetState(::grpc::ClientContext* context, const ::agent::SetStateRequest* request, ::agent::SetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAction(::grpc::ClientContext* context, const ::agent::GetActionRequest* request, ::agent::GetActionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAction(::grpc::ClientContext* context, const ::agent::GetActionRequest* request, ::agent::GetActionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PlannerStep(::grpc::ClientContext* context, const ::agent::PlannerStepRequest* request, ::agent::PlannerStepResponse* response, std::function<void(::grpc::Status)>) override;
      void PlannerStep(::grpc::ClientContext* context, const ::agent::PlannerStepRequest* request, ::agent::PlannerStepResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Step(::grpc::ClientContext* context, const ::agent::StepRequest* request, ::agent::StepResponse* response, std::function<void(::grpc::Status)>) override;
      void Step(::grpc::ClientContext* context, const ::agent::StepRequest* request, ::agent::StepResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Reset(::grpc::ClientContext* context, const ::agent::ResetRequest* request, ::agent::ResetResponse* response, std::function<void(::grpc::Status)>) override;
      void Reset(::grpc::ClientContext* context, const ::agent::ResetRequest* request, ::agent::ResetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetTaskParameters(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest* request, ::agent::SetTaskParametersResponse* response, std::function<void(::grpc::Status)>) override;
      void SetTaskParameters(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest* request, ::agent::SetTaskParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetTaskParameters(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest* request, ::agent::GetTaskParametersResponse* response, std::function<void(::grpc::Status)>) override;
      void GetTaskParameters(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest* request, ::agent::GetTaskParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetCostWeights(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest* request, ::agent::SetCostWeightsResponse* response, std::function<void(::grpc::Status)>) override;
      void SetCostWeights(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest* request, ::agent::SetCostWeightsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetResiduals(::grpc::ClientContext* context, const ::agent::GetResidualsRequest* request, ::agent::GetResidualsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetResiduals(::grpc::ClientContext* context, const ::agent::GetResidualsRequest* request, ::agent::GetResidualsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCostValuesAndWeights(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest* request, ::agent::GetCostValuesAndWeightsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCostValuesAndWeights(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest* request, ::agent::GetCostValuesAndWeightsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetMode(::grpc::ClientContext* context, const ::agent::SetModeRequest* request, ::agent::SetModeResponse* response, std::function<void(::grpc::Status)>) override;
      void SetMode(::grpc::ClientContext* context, const ::agent::SetModeRequest* request, ::agent::SetModeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetMode(::grpc::ClientContext* context, const ::agent::GetModeRequest* request, ::agent::GetModeResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMode(::grpc::ClientContext* context, const ::agent::GetModeRequest* request, ::agent::GetModeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllModes(::grpc::ClientContext* context, const ::agent::GetAllModesRequest* request, ::agent::GetAllModesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAllModes(::grpc::ClientContext* context, const ::agent::GetAllModesRequest* request, ::agent::GetAllModesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBestTrajectory(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest* request, ::agent::GetBestTrajectoryResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBestTrajectory(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest* request, ::agent::GetBestTrajectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetAnything(::grpc::ClientContext* context, const ::agent::SetAnythingRequest* request, ::agent::SetAnythingResponse* response, std::function<void(::grpc::Status)>) override;
      void SetAnything(::grpc::ClientContext* context, const ::agent::SetAnythingRequest* request, ::agent::SetAnythingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::agent::InitResponse>* AsyncInitRaw(::grpc::ClientContext* context, const ::agent::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::InitResponse>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::agent::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::GetStateResponse>* AsyncGetStateRaw(::grpc::ClientContext* context, const ::agent::GetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::GetStateResponse>* PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::agent::GetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::SetStateResponse>* AsyncSetStateRaw(::grpc::ClientContext* context, const ::agent::SetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::SetStateResponse>* PrepareAsyncSetStateRaw(::grpc::ClientContext* context, const ::agent::SetStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::GetActionResponse>* AsyncGetActionRaw(::grpc::ClientContext* context, const ::agent::GetActionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::GetActionResponse>* PrepareAsyncGetActionRaw(::grpc::ClientContext* context, const ::agent::GetActionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::PlannerStepResponse>* AsyncPlannerStepRaw(::grpc::ClientContext* context, const ::agent::PlannerStepRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::PlannerStepResponse>* PrepareAsyncPlannerStepRaw(::grpc::ClientContext* context, const ::agent::PlannerStepRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::StepResponse>* AsyncStepRaw(::grpc::ClientContext* context, const ::agent::StepRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::StepResponse>* PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::agent::StepRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::agent::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::ResetResponse>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::agent::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::SetTaskParametersResponse>* AsyncSetTaskParametersRaw(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::SetTaskParametersResponse>* PrepareAsyncSetTaskParametersRaw(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::GetTaskParametersResponse>* AsyncGetTaskParametersRaw(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::GetTaskParametersResponse>* PrepareAsyncGetTaskParametersRaw(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::SetCostWeightsResponse>* AsyncSetCostWeightsRaw(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::SetCostWeightsResponse>* PrepareAsyncSetCostWeightsRaw(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::GetResidualsResponse>* AsyncGetResidualsRaw(::grpc::ClientContext* context, const ::agent::GetResidualsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::GetResidualsResponse>* PrepareAsyncGetResidualsRaw(::grpc::ClientContext* context, const ::agent::GetResidualsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::GetCostValuesAndWeightsResponse>* AsyncGetCostValuesAndWeightsRaw(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::GetCostValuesAndWeightsResponse>* PrepareAsyncGetCostValuesAndWeightsRaw(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::SetModeResponse>* AsyncSetModeRaw(::grpc::ClientContext* context, const ::agent::SetModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::SetModeResponse>* PrepareAsyncSetModeRaw(::grpc::ClientContext* context, const ::agent::SetModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::GetModeResponse>* AsyncGetModeRaw(::grpc::ClientContext* context, const ::agent::GetModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::GetModeResponse>* PrepareAsyncGetModeRaw(::grpc::ClientContext* context, const ::agent::GetModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::GetAllModesResponse>* AsyncGetAllModesRaw(::grpc::ClientContext* context, const ::agent::GetAllModesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::GetAllModesResponse>* PrepareAsyncGetAllModesRaw(::grpc::ClientContext* context, const ::agent::GetAllModesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::GetBestTrajectoryResponse>* AsyncGetBestTrajectoryRaw(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::GetBestTrajectoryResponse>* PrepareAsyncGetBestTrajectoryRaw(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::SetAnythingResponse>* AsyncSetAnythingRaw(::grpc::ClientContext* context, const ::agent::SetAnythingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agent::SetAnythingResponse>* PrepareAsyncSetAnythingRaw(::grpc::ClientContext* context, const ::agent::SetAnythingRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Init_;
    const ::grpc::internal::RpcMethod rpcmethod_GetState_;
    const ::grpc::internal::RpcMethod rpcmethod_SetState_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAction_;
    const ::grpc::internal::RpcMethod rpcmethod_PlannerStep_;
    const ::grpc::internal::RpcMethod rpcmethod_Step_;
    const ::grpc::internal::RpcMethod rpcmethod_Reset_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTaskParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTaskParameters_;
    const ::grpc::internal::RpcMethod rpcmethod_SetCostWeights_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResiduals_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCostValuesAndWeights_;
    const ::grpc::internal::RpcMethod rpcmethod_SetMode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMode_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllModes_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBestTrajectory_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAnything_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Initialize MJPC Agent.
    virtual ::grpc::Status Init(::grpc::ServerContext* context, const ::agent::InitRequest* request, ::agent::InitResponse* response);
    // Get the simulation state.
    virtual ::grpc::Status GetState(::grpc::ServerContext* context, const ::agent::GetStateRequest* request, ::agent::GetStateResponse* response);
    // Set state of the MJPC Agent.
    virtual ::grpc::Status SetState(::grpc::ServerContext* context, const ::agent::SetStateRequest* request, ::agent::SetStateResponse* response);
    // Get the current action from the Agent.
    virtual ::grpc::Status GetAction(::grpc::ServerContext* context, const ::agent::GetActionRequest* request, ::agent::GetActionResponse* response);
    // Compute one plan step.
    virtual ::grpc::Status PlannerStep(::grpc::ServerContext* context, const ::agent::PlannerStepRequest* request, ::agent::PlannerStepResponse* response);
    // Step physics once, using actions from the planner.
    virtual ::grpc::Status Step(::grpc::ServerContext* context, const ::agent::StepRequest* request, ::agent::StepResponse* response);
    // Reset the Agent.
    virtual ::grpc::Status Reset(::grpc::ServerContext* context, const ::agent::ResetRequest* request, ::agent::ResetResponse* response);
    // Set a task parameters.
    virtual ::grpc::Status SetTaskParameters(::grpc::ServerContext* context, const ::agent::SetTaskParametersRequest* request, ::agent::SetTaskParametersResponse* response);
    // Get a task parameters.
    virtual ::grpc::Status GetTaskParameters(::grpc::ServerContext* context, const ::agent::GetTaskParametersRequest* request, ::agent::GetTaskParametersResponse* response);
    // Set cost weights.
    virtual ::grpc::Status SetCostWeights(::grpc::ServerContext* context, const ::agent::SetCostWeightsRequest* request, ::agent::SetCostWeightsResponse* response);
    // Get cost term residuals.
    virtual ::grpc::Status GetResiduals(::grpc::ServerContext* context, const ::agent::GetResidualsRequest* request, ::agent::GetResidualsResponse* response);
    // Get cost term values.
    virtual ::grpc::Status GetCostValuesAndWeights(::grpc::ServerContext* context, const ::agent::GetCostValuesAndWeightsRequest* request, ::agent::GetCostValuesAndWeightsResponse* response);
    // Set mode.
    virtual ::grpc::Status SetMode(::grpc::ServerContext* context, const ::agent::SetModeRequest* request, ::agent::SetModeResponse* response);
    // Get mode.
    virtual ::grpc::Status GetMode(::grpc::ServerContext* context, const ::agent::GetModeRequest* request, ::agent::GetModeResponse* response);
    // Get all modes.
    virtual ::grpc::Status GetAllModes(::grpc::ServerContext* context, const ::agent::GetAllModesRequest* request, ::agent::GetAllModesResponse* response);
    // Get best trajectory (states, actions, times).
    virtual ::grpc::Status GetBestTrajectory(::grpc::ServerContext* context, const ::agent::GetBestTrajectoryRequest* request, ::agent::GetBestTrajectoryResponse* response);
    // A single method that can set many of the inputs.
    virtual ::grpc::Status SetAnything(::grpc::ServerContext* context, const ::agent::SetAnythingRequest* request, ::agent::SetAnythingResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Init() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::agent::InitRequest* /*request*/, ::agent::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::agent::InitRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::InitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetState() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::agent::GetStateRequest* /*request*/, ::agent::GetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetState(::grpc::ServerContext* context, ::agent::GetStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::GetStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetState() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetState(::grpc::ServerContext* /*context*/, const ::agent::SetStateRequest* /*request*/, ::agent::SetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetState(::grpc::ServerContext* context, ::agent::SetStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::SetStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAction() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* /*context*/, const ::agent::GetActionRequest* /*request*/, ::agent::GetActionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAction(::grpc::ServerContext* context, ::agent::GetActionRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::GetActionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PlannerStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PlannerStep() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_PlannerStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlannerStep(::grpc::ServerContext* /*context*/, const ::agent::PlannerStepRequest* /*request*/, ::agent::PlannerStepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlannerStep(::grpc::ServerContext* context, ::agent::PlannerStepRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::PlannerStepResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Step() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::agent::StepRequest* /*request*/, ::agent::StepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::agent::StepRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::StepResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Reset() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::agent::ResetRequest* /*request*/, ::agent::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::agent::ResetRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::ResetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTaskParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetTaskParameters() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SetTaskParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTaskParameters(::grpc::ServerContext* /*context*/, const ::agent::SetTaskParametersRequest* /*request*/, ::agent::SetTaskParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTaskParameters(::grpc::ServerContext* context, ::agent::SetTaskParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::SetTaskParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTaskParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTaskParameters() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_GetTaskParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskParameters(::grpc::ServerContext* /*context*/, const ::agent::GetTaskParametersRequest* /*request*/, ::agent::GetTaskParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTaskParameters(::grpc::ServerContext* context, ::agent::GetTaskParametersRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::GetTaskParametersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCostWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetCostWeights() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SetCostWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCostWeights(::grpc::ServerContext* /*context*/, const ::agent::SetCostWeightsRequest* /*request*/, ::agent::SetCostWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCostWeights(::grpc::ServerContext* context, ::agent::SetCostWeightsRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::SetCostWeightsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResiduals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResiduals() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetResiduals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResiduals(::grpc::ServerContext* /*context*/, const ::agent::GetResidualsRequest* /*request*/, ::agent::GetResidualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResiduals(::grpc::ServerContext* context, ::agent::GetResidualsRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::GetResidualsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCostValuesAndWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCostValuesAndWeights() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_GetCostValuesAndWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCostValuesAndWeights(::grpc::ServerContext* /*context*/, const ::agent::GetCostValuesAndWeightsRequest* /*request*/, ::agent::GetCostValuesAndWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCostValuesAndWeights(::grpc::ServerContext* context, ::agent::GetCostValuesAndWeightsRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::GetCostValuesAndWeightsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetMode() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_SetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMode(::grpc::ServerContext* /*context*/, const ::agent::SetModeRequest* /*request*/, ::agent::SetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMode(::grpc::ServerContext* context, ::agent::SetModeRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::SetModeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMode() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMode(::grpc::ServerContext* /*context*/, const ::agent::GetModeRequest* /*request*/, ::agent::GetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMode(::grpc::ServerContext* context, ::agent::GetModeRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::GetModeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllModes() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetAllModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllModes(::grpc::ServerContext* /*context*/, const ::agent::GetAllModesRequest* /*request*/, ::agent::GetAllModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllModes(::grpc::ServerContext* context, ::agent::GetAllModesRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::GetAllModesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBestTrajectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBestTrajectory() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetBestTrajectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBestTrajectory(::grpc::ServerContext* /*context*/, const ::agent::GetBestTrajectoryRequest* /*request*/, ::agent::GetBestTrajectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBestTrajectory(::grpc::ServerContext* context, ::agent::GetBestTrajectoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::GetBestTrajectoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAnything : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAnything() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_SetAnything() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAnything(::grpc::ServerContext* /*context*/, const ::agent::SetAnythingRequest* /*request*/, ::agent::SetAnythingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAnything(::grpc::ServerContext* context, ::agent::SetAnythingRequest* request, ::grpc::ServerAsyncResponseWriter< ::agent::SetAnythingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Init<WithAsyncMethod_GetState<WithAsyncMethod_SetState<WithAsyncMethod_GetAction<WithAsyncMethod_PlannerStep<WithAsyncMethod_Step<WithAsyncMethod_Reset<WithAsyncMethod_SetTaskParameters<WithAsyncMethod_GetTaskParameters<WithAsyncMethod_SetCostWeights<WithAsyncMethod_GetResiduals<WithAsyncMethod_GetCostValuesAndWeights<WithAsyncMethod_SetMode<WithAsyncMethod_GetMode<WithAsyncMethod_GetAllModes<WithAsyncMethod_GetBestTrajectory<WithAsyncMethod_SetAnything<Service > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Init() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::InitRequest, ::agent::InitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::InitRequest* request, ::agent::InitResponse* response) { return this->Init(context, request, response); }));}
    void SetMessageAllocatorFor_Init(
        ::grpc::MessageAllocator< ::agent::InitRequest, ::agent::InitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::InitRequest, ::agent::InitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::agent::InitRequest* /*request*/, ::agent::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::InitRequest* /*request*/, ::agent::InitResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetState() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::GetStateRequest, ::agent::GetStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::GetStateRequest* request, ::agent::GetStateResponse* response) { return this->GetState(context, request, response); }));}
    void SetMessageAllocatorFor_GetState(
        ::grpc::MessageAllocator< ::agent::GetStateRequest, ::agent::GetStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::GetStateRequest, ::agent::GetStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::agent::GetStateRequest* /*request*/, ::agent::GetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetState(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::GetStateRequest* /*request*/, ::agent::GetStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetState() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::SetStateRequest, ::agent::SetStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::SetStateRequest* request, ::agent::SetStateResponse* response) { return this->SetState(context, request, response); }));}
    void SetMessageAllocatorFor_SetState(
        ::grpc::MessageAllocator< ::agent::SetStateRequest, ::agent::SetStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::SetStateRequest, ::agent::SetStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetState(::grpc::ServerContext* /*context*/, const ::agent::SetStateRequest* /*request*/, ::agent::SetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetState(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::SetStateRequest* /*request*/, ::agent::SetStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAction() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::GetActionRequest, ::agent::GetActionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::GetActionRequest* request, ::agent::GetActionResponse* response) { return this->GetAction(context, request, response); }));}
    void SetMessageAllocatorFor_GetAction(
        ::grpc::MessageAllocator< ::agent::GetActionRequest, ::agent::GetActionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::GetActionRequest, ::agent::GetActionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* /*context*/, const ::agent::GetActionRequest* /*request*/, ::agent::GetActionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAction(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::GetActionRequest* /*request*/, ::agent::GetActionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PlannerStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PlannerStep() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::PlannerStepRequest, ::agent::PlannerStepResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::PlannerStepRequest* request, ::agent::PlannerStepResponse* response) { return this->PlannerStep(context, request, response); }));}
    void SetMessageAllocatorFor_PlannerStep(
        ::grpc::MessageAllocator< ::agent::PlannerStepRequest, ::agent::PlannerStepResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::PlannerStepRequest, ::agent::PlannerStepResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PlannerStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlannerStep(::grpc::ServerContext* /*context*/, const ::agent::PlannerStepRequest* /*request*/, ::agent::PlannerStepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PlannerStep(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::PlannerStepRequest* /*request*/, ::agent::PlannerStepResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Step() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::StepRequest, ::agent::StepResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::StepRequest* request, ::agent::StepResponse* response) { return this->Step(context, request, response); }));}
    void SetMessageAllocatorFor_Step(
        ::grpc::MessageAllocator< ::agent::StepRequest, ::agent::StepResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::StepRequest, ::agent::StepResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::agent::StepRequest* /*request*/, ::agent::StepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Step(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::StepRequest* /*request*/, ::agent::StepResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Reset() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::ResetRequest, ::agent::ResetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::ResetRequest* request, ::agent::ResetResponse* response) { return this->Reset(context, request, response); }));}
    void SetMessageAllocatorFor_Reset(
        ::grpc::MessageAllocator< ::agent::ResetRequest, ::agent::ResetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::ResetRequest, ::agent::ResetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::agent::ResetRequest* /*request*/, ::agent::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Reset(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::ResetRequest* /*request*/, ::agent::ResetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetTaskParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetTaskParameters() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::SetTaskParametersRequest, ::agent::SetTaskParametersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::SetTaskParametersRequest* request, ::agent::SetTaskParametersResponse* response) { return this->SetTaskParameters(context, request, response); }));}
    void SetMessageAllocatorFor_SetTaskParameters(
        ::grpc::MessageAllocator< ::agent::SetTaskParametersRequest, ::agent::SetTaskParametersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::SetTaskParametersRequest, ::agent::SetTaskParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetTaskParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTaskParameters(::grpc::ServerContext* /*context*/, const ::agent::SetTaskParametersRequest* /*request*/, ::agent::SetTaskParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTaskParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::SetTaskParametersRequest* /*request*/, ::agent::SetTaskParametersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetTaskParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetTaskParameters() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::GetTaskParametersRequest, ::agent::GetTaskParametersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::GetTaskParametersRequest* request, ::agent::GetTaskParametersResponse* response) { return this->GetTaskParameters(context, request, response); }));}
    void SetMessageAllocatorFor_GetTaskParameters(
        ::grpc::MessageAllocator< ::agent::GetTaskParametersRequest, ::agent::GetTaskParametersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::GetTaskParametersRequest, ::agent::GetTaskParametersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetTaskParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskParameters(::grpc::ServerContext* /*context*/, const ::agent::GetTaskParametersRequest* /*request*/, ::agent::GetTaskParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTaskParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::GetTaskParametersRequest* /*request*/, ::agent::GetTaskParametersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetCostWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetCostWeights() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::SetCostWeightsRequest, ::agent::SetCostWeightsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::SetCostWeightsRequest* request, ::agent::SetCostWeightsResponse* response) { return this->SetCostWeights(context, request, response); }));}
    void SetMessageAllocatorFor_SetCostWeights(
        ::grpc::MessageAllocator< ::agent::SetCostWeightsRequest, ::agent::SetCostWeightsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::SetCostWeightsRequest, ::agent::SetCostWeightsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetCostWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCostWeights(::grpc::ServerContext* /*context*/, const ::agent::SetCostWeightsRequest* /*request*/, ::agent::SetCostWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCostWeights(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::SetCostWeightsRequest* /*request*/, ::agent::SetCostWeightsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetResiduals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetResiduals() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::GetResidualsRequest, ::agent::GetResidualsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::GetResidualsRequest* request, ::agent::GetResidualsResponse* response) { return this->GetResiduals(context, request, response); }));}
    void SetMessageAllocatorFor_GetResiduals(
        ::grpc::MessageAllocator< ::agent::GetResidualsRequest, ::agent::GetResidualsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::GetResidualsRequest, ::agent::GetResidualsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetResiduals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResiduals(::grpc::ServerContext* /*context*/, const ::agent::GetResidualsRequest* /*request*/, ::agent::GetResidualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetResiduals(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::GetResidualsRequest* /*request*/, ::agent::GetResidualsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCostValuesAndWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCostValuesAndWeights() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::GetCostValuesAndWeightsRequest, ::agent::GetCostValuesAndWeightsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::GetCostValuesAndWeightsRequest* request, ::agent::GetCostValuesAndWeightsResponse* response) { return this->GetCostValuesAndWeights(context, request, response); }));}
    void SetMessageAllocatorFor_GetCostValuesAndWeights(
        ::grpc::MessageAllocator< ::agent::GetCostValuesAndWeightsRequest, ::agent::GetCostValuesAndWeightsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::GetCostValuesAndWeightsRequest, ::agent::GetCostValuesAndWeightsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCostValuesAndWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCostValuesAndWeights(::grpc::ServerContext* /*context*/, const ::agent::GetCostValuesAndWeightsRequest* /*request*/, ::agent::GetCostValuesAndWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCostValuesAndWeights(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::GetCostValuesAndWeightsRequest* /*request*/, ::agent::GetCostValuesAndWeightsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetMode() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::SetModeRequest, ::agent::SetModeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::SetModeRequest* request, ::agent::SetModeResponse* response) { return this->SetMode(context, request, response); }));}
    void SetMessageAllocatorFor_SetMode(
        ::grpc::MessageAllocator< ::agent::SetModeRequest, ::agent::SetModeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::SetModeRequest, ::agent::SetModeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMode(::grpc::ServerContext* /*context*/, const ::agent::SetModeRequest* /*request*/, ::agent::SetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMode(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::SetModeRequest* /*request*/, ::agent::SetModeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMode() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::GetModeRequest, ::agent::GetModeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::GetModeRequest* request, ::agent::GetModeResponse* response) { return this->GetMode(context, request, response); }));}
    void SetMessageAllocatorFor_GetMode(
        ::grpc::MessageAllocator< ::agent::GetModeRequest, ::agent::GetModeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::GetModeRequest, ::agent::GetModeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMode(::grpc::ServerContext* /*context*/, const ::agent::GetModeRequest* /*request*/, ::agent::GetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMode(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::GetModeRequest* /*request*/, ::agent::GetModeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllModes() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::GetAllModesRequest, ::agent::GetAllModesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::GetAllModesRequest* request, ::agent::GetAllModesResponse* response) { return this->GetAllModes(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllModes(
        ::grpc::MessageAllocator< ::agent::GetAllModesRequest, ::agent::GetAllModesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::GetAllModesRequest, ::agent::GetAllModesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllModes(::grpc::ServerContext* /*context*/, const ::agent::GetAllModesRequest* /*request*/, ::agent::GetAllModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllModes(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::GetAllModesRequest* /*request*/, ::agent::GetAllModesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBestTrajectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBestTrajectory() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::GetBestTrajectoryRequest, ::agent::GetBestTrajectoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::GetBestTrajectoryRequest* request, ::agent::GetBestTrajectoryResponse* response) { return this->GetBestTrajectory(context, request, response); }));}
    void SetMessageAllocatorFor_GetBestTrajectory(
        ::grpc::MessageAllocator< ::agent::GetBestTrajectoryRequest, ::agent::GetBestTrajectoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::GetBestTrajectoryRequest, ::agent::GetBestTrajectoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBestTrajectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBestTrajectory(::grpc::ServerContext* /*context*/, const ::agent::GetBestTrajectoryRequest* /*request*/, ::agent::GetBestTrajectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBestTrajectory(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::GetBestTrajectoryRequest* /*request*/, ::agent::GetBestTrajectoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetAnything : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetAnything() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::agent::SetAnythingRequest, ::agent::SetAnythingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agent::SetAnythingRequest* request, ::agent::SetAnythingResponse* response) { return this->SetAnything(context, request, response); }));}
    void SetMessageAllocatorFor_SetAnything(
        ::grpc::MessageAllocator< ::agent::SetAnythingRequest, ::agent::SetAnythingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agent::SetAnythingRequest, ::agent::SetAnythingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetAnything() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAnything(::grpc::ServerContext* /*context*/, const ::agent::SetAnythingRequest* /*request*/, ::agent::SetAnythingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAnything(
      ::grpc::CallbackServerContext* /*context*/, const ::agent::SetAnythingRequest* /*request*/, ::agent::SetAnythingResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Init<WithCallbackMethod_GetState<WithCallbackMethod_SetState<WithCallbackMethod_GetAction<WithCallbackMethod_PlannerStep<WithCallbackMethod_Step<WithCallbackMethod_Reset<WithCallbackMethod_SetTaskParameters<WithCallbackMethod_GetTaskParameters<WithCallbackMethod_SetCostWeights<WithCallbackMethod_GetResiduals<WithCallbackMethod_GetCostValuesAndWeights<WithCallbackMethod_SetMode<WithCallbackMethod_GetMode<WithCallbackMethod_GetAllModes<WithCallbackMethod_GetBestTrajectory<WithCallbackMethod_SetAnything<Service > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Init() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::agent::InitRequest* /*request*/, ::agent::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetState() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::agent::GetStateRequest* /*request*/, ::agent::GetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetState() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetState(::grpc::ServerContext* /*context*/, const ::agent::SetStateRequest* /*request*/, ::agent::SetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAction() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* /*context*/, const ::agent::GetActionRequest* /*request*/, ::agent::GetActionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PlannerStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PlannerStep() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_PlannerStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlannerStep(::grpc::ServerContext* /*context*/, const ::agent::PlannerStepRequest* /*request*/, ::agent::PlannerStepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Step() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::agent::StepRequest* /*request*/, ::agent::StepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Reset() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::agent::ResetRequest* /*request*/, ::agent::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTaskParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetTaskParameters() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SetTaskParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTaskParameters(::grpc::ServerContext* /*context*/, const ::agent::SetTaskParametersRequest* /*request*/, ::agent::SetTaskParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTaskParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTaskParameters() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_GetTaskParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskParameters(::grpc::ServerContext* /*context*/, const ::agent::GetTaskParametersRequest* /*request*/, ::agent::GetTaskParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetCostWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetCostWeights() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SetCostWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCostWeights(::grpc::ServerContext* /*context*/, const ::agent::SetCostWeightsRequest* /*request*/, ::agent::SetCostWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResiduals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResiduals() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetResiduals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResiduals(::grpc::ServerContext* /*context*/, const ::agent::GetResidualsRequest* /*request*/, ::agent::GetResidualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCostValuesAndWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCostValuesAndWeights() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_GetCostValuesAndWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCostValuesAndWeights(::grpc::ServerContext* /*context*/, const ::agent::GetCostValuesAndWeightsRequest* /*request*/, ::agent::GetCostValuesAndWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetMode() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_SetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMode(::grpc::ServerContext* /*context*/, const ::agent::SetModeRequest* /*request*/, ::agent::SetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMode() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMode(::grpc::ServerContext* /*context*/, const ::agent::GetModeRequest* /*request*/, ::agent::GetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllModes() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetAllModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllModes(::grpc::ServerContext* /*context*/, const ::agent::GetAllModesRequest* /*request*/, ::agent::GetAllModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBestTrajectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBestTrajectory() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetBestTrajectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBestTrajectory(::grpc::ServerContext* /*context*/, const ::agent::GetBestTrajectoryRequest* /*request*/, ::agent::GetBestTrajectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAnything : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAnything() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_SetAnything() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAnything(::grpc::ServerContext* /*context*/, const ::agent::SetAnythingRequest* /*request*/, ::agent::SetAnythingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Init() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::agent::InitRequest* /*request*/, ::agent::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetState() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::agent::GetStateRequest* /*request*/, ::agent::GetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetState() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetState(::grpc::ServerContext* /*context*/, const ::agent::SetStateRequest* /*request*/, ::agent::SetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAction() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* /*context*/, const ::agent::GetActionRequest* /*request*/, ::agent::GetActionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PlannerStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PlannerStep() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_PlannerStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlannerStep(::grpc::ServerContext* /*context*/, const ::agent::PlannerStepRequest* /*request*/, ::agent::PlannerStepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPlannerStep(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Step() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::agent::StepRequest* /*request*/, ::agent::StepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStep(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Reset() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::agent::ResetRequest* /*request*/, ::agent::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTaskParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetTaskParameters() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SetTaskParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTaskParameters(::grpc::ServerContext* /*context*/, const ::agent::SetTaskParametersRequest* /*request*/, ::agent::SetTaskParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTaskParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTaskParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTaskParameters() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_GetTaskParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskParameters(::grpc::ServerContext* /*context*/, const ::agent::GetTaskParametersRequest* /*request*/, ::agent::GetTaskParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTaskParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetCostWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetCostWeights() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SetCostWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCostWeights(::grpc::ServerContext* /*context*/, const ::agent::SetCostWeightsRequest* /*request*/, ::agent::SetCostWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCostWeights(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResiduals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResiduals() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetResiduals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResiduals(::grpc::ServerContext* /*context*/, const ::agent::GetResidualsRequest* /*request*/, ::agent::GetResidualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResiduals(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCostValuesAndWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCostValuesAndWeights() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_GetCostValuesAndWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCostValuesAndWeights(::grpc::ServerContext* /*context*/, const ::agent::GetCostValuesAndWeightsRequest* /*request*/, ::agent::GetCostValuesAndWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCostValuesAndWeights(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetMode() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_SetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMode(::grpc::ServerContext* /*context*/, const ::agent::SetModeRequest* /*request*/, ::agent::SetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMode() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMode(::grpc::ServerContext* /*context*/, const ::agent::GetModeRequest* /*request*/, ::agent::GetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllModes() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetAllModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllModes(::grpc::ServerContext* /*context*/, const ::agent::GetAllModesRequest* /*request*/, ::agent::GetAllModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllModes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBestTrajectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBestTrajectory() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetBestTrajectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBestTrajectory(::grpc::ServerContext* /*context*/, const ::agent::GetBestTrajectoryRequest* /*request*/, ::agent::GetBestTrajectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBestTrajectory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAnything : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAnything() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_SetAnything() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAnything(::grpc::ServerContext* /*context*/, const ::agent::SetAnythingRequest* /*request*/, ::agent::SetAnythingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAnything(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Init() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Init(context, request, response); }));
    }
    ~WithRawCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::agent::InitRequest* /*request*/, ::agent::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetState() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetState(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::agent::GetStateRequest* /*request*/, ::agent::GetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetState() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetState(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetState(::grpc::ServerContext* /*context*/, const ::agent::SetStateRequest* /*request*/, ::agent::SetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAction() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAction(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* /*context*/, const ::agent::GetActionRequest* /*request*/, ::agent::GetActionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PlannerStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PlannerStep() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PlannerStep(context, request, response); }));
    }
    ~WithRawCallbackMethod_PlannerStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PlannerStep(::grpc::ServerContext* /*context*/, const ::agent::PlannerStepRequest* /*request*/, ::agent::PlannerStepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PlannerStep(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Step() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Step(context, request, response); }));
    }
    ~WithRawCallbackMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::agent::StepRequest* /*request*/, ::agent::StepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Step(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Reset() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Reset(context, request, response); }));
    }
    ~WithRawCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::agent::ResetRequest* /*request*/, ::agent::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Reset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetTaskParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetTaskParameters() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetTaskParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetTaskParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTaskParameters(::grpc::ServerContext* /*context*/, const ::agent::SetTaskParametersRequest* /*request*/, ::agent::SetTaskParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTaskParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetTaskParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetTaskParameters() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTaskParameters(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetTaskParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTaskParameters(::grpc::ServerContext* /*context*/, const ::agent::GetTaskParametersRequest* /*request*/, ::agent::GetTaskParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetTaskParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetCostWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetCostWeights() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetCostWeights(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetCostWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCostWeights(::grpc::ServerContext* /*context*/, const ::agent::SetCostWeightsRequest* /*request*/, ::agent::SetCostWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCostWeights(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetResiduals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetResiduals() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetResiduals(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetResiduals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResiduals(::grpc::ServerContext* /*context*/, const ::agent::GetResidualsRequest* /*request*/, ::agent::GetResidualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetResiduals(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCostValuesAndWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCostValuesAndWeights() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCostValuesAndWeights(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCostValuesAndWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCostValuesAndWeights(::grpc::ServerContext* /*context*/, const ::agent::GetCostValuesAndWeightsRequest* /*request*/, ::agent::GetCostValuesAndWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCostValuesAndWeights(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetMode() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetMode(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMode(::grpc::ServerContext* /*context*/, const ::agent::SetModeRequest* /*request*/, ::agent::SetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMode() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMode(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMode(::grpc::ServerContext* /*context*/, const ::agent::GetModeRequest* /*request*/, ::agent::GetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllModes() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllModes(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllModes(::grpc::ServerContext* /*context*/, const ::agent::GetAllModesRequest* /*request*/, ::agent::GetAllModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllModes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBestTrajectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBestTrajectory() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBestTrajectory(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBestTrajectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBestTrajectory(::grpc::ServerContext* /*context*/, const ::agent::GetBestTrajectoryRequest* /*request*/, ::agent::GetBestTrajectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBestTrajectory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetAnything : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetAnything() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAnything(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetAnything() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAnything(::grpc::ServerContext* /*context*/, const ::agent::SetAnythingRequest* /*request*/, ::agent::SetAnythingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAnything(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Init() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::InitRequest, ::agent::InitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::InitRequest, ::agent::InitResponse>* streamer) {
                       return this->StreamedInit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::agent::InitRequest* /*request*/, ::agent::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::InitRequest,::agent::InitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetState() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::GetStateRequest, ::agent::GetStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::GetStateRequest, ::agent::GetStateResponse>* streamer) {
                       return this->StreamedGetState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetState(::grpc::ServerContext* /*context*/, const ::agent::GetStateRequest* /*request*/, ::agent::GetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::GetStateRequest,::agent::GetStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetState() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::SetStateRequest, ::agent::SetStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::SetStateRequest, ::agent::SetStateResponse>* streamer) {
                       return this->StreamedSetState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetState(::grpc::ServerContext* /*context*/, const ::agent::SetStateRequest* /*request*/, ::agent::SetStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::SetStateRequest,::agent::SetStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAction() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::GetActionRequest, ::agent::GetActionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::GetActionRequest, ::agent::GetActionResponse>* streamer) {
                       return this->StreamedGetAction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAction(::grpc::ServerContext* /*context*/, const ::agent::GetActionRequest* /*request*/, ::agent::GetActionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::GetActionRequest,::agent::GetActionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PlannerStep : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PlannerStep() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::PlannerStepRequest, ::agent::PlannerStepResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::PlannerStepRequest, ::agent::PlannerStepResponse>* streamer) {
                       return this->StreamedPlannerStep(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PlannerStep() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PlannerStep(::grpc::ServerContext* /*context*/, const ::agent::PlannerStepRequest* /*request*/, ::agent::PlannerStepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPlannerStep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::PlannerStepRequest,::agent::PlannerStepResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Step : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Step() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::StepRequest, ::agent::StepResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::StepRequest, ::agent::StepResponse>* streamer) {
                       return this->StreamedStep(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Step() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Step(::grpc::ServerContext* /*context*/, const ::agent::StepRequest* /*request*/, ::agent::StepResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStep(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::StepRequest,::agent::StepResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Reset() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::ResetRequest, ::agent::ResetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::ResetRequest, ::agent::ResetResponse>* streamer) {
                       return this->StreamedReset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::agent::ResetRequest* /*request*/, ::agent::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::ResetRequest,::agent::ResetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTaskParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetTaskParameters() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::SetTaskParametersRequest, ::agent::SetTaskParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::SetTaskParametersRequest, ::agent::SetTaskParametersResponse>* streamer) {
                       return this->StreamedSetTaskParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetTaskParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTaskParameters(::grpc::ServerContext* /*context*/, const ::agent::SetTaskParametersRequest* /*request*/, ::agent::SetTaskParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTaskParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::SetTaskParametersRequest,::agent::SetTaskParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTaskParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTaskParameters() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::GetTaskParametersRequest, ::agent::GetTaskParametersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::GetTaskParametersRequest, ::agent::GetTaskParametersResponse>* streamer) {
                       return this->StreamedGetTaskParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetTaskParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTaskParameters(::grpc::ServerContext* /*context*/, const ::agent::GetTaskParametersRequest* /*request*/, ::agent::GetTaskParametersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTaskParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::GetTaskParametersRequest,::agent::GetTaskParametersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCostWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetCostWeights() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::SetCostWeightsRequest, ::agent::SetCostWeightsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::SetCostWeightsRequest, ::agent::SetCostWeightsResponse>* streamer) {
                       return this->StreamedSetCostWeights(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetCostWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCostWeights(::grpc::ServerContext* /*context*/, const ::agent::SetCostWeightsRequest* /*request*/, ::agent::SetCostWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCostWeights(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::SetCostWeightsRequest,::agent::SetCostWeightsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetResiduals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetResiduals() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::GetResidualsRequest, ::agent::GetResidualsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::GetResidualsRequest, ::agent::GetResidualsResponse>* streamer) {
                       return this->StreamedGetResiduals(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetResiduals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetResiduals(::grpc::ServerContext* /*context*/, const ::agent::GetResidualsRequest* /*request*/, ::agent::GetResidualsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetResiduals(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::GetResidualsRequest,::agent::GetResidualsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCostValuesAndWeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCostValuesAndWeights() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::GetCostValuesAndWeightsRequest, ::agent::GetCostValuesAndWeightsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::GetCostValuesAndWeightsRequest, ::agent::GetCostValuesAndWeightsResponse>* streamer) {
                       return this->StreamedGetCostValuesAndWeights(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCostValuesAndWeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCostValuesAndWeights(::grpc::ServerContext* /*context*/, const ::agent::GetCostValuesAndWeightsRequest* /*request*/, ::agent::GetCostValuesAndWeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCostValuesAndWeights(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::GetCostValuesAndWeightsRequest,::agent::GetCostValuesAndWeightsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetMode() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::SetModeRequest, ::agent::SetModeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::SetModeRequest, ::agent::SetModeResponse>* streamer) {
                       return this->StreamedSetMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetMode(::grpc::ServerContext* /*context*/, const ::agent::SetModeRequest* /*request*/, ::agent::SetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::SetModeRequest,::agent::SetModeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMode() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::GetModeRequest, ::agent::GetModeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::GetModeRequest, ::agent::GetModeResponse>* streamer) {
                       return this->StreamedGetMode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMode(::grpc::ServerContext* /*context*/, const ::agent::GetModeRequest* /*request*/, ::agent::GetModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::GetModeRequest,::agent::GetModeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllModes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllModes() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::GetAllModesRequest, ::agent::GetAllModesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::GetAllModesRequest, ::agent::GetAllModesResponse>* streamer) {
                       return this->StreamedGetAllModes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllModes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllModes(::grpc::ServerContext* /*context*/, const ::agent::GetAllModesRequest* /*request*/, ::agent::GetAllModesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllModes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::GetAllModesRequest,::agent::GetAllModesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBestTrajectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBestTrajectory() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::GetBestTrajectoryRequest, ::agent::GetBestTrajectoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::GetBestTrajectoryRequest, ::agent::GetBestTrajectoryResponse>* streamer) {
                       return this->StreamedGetBestTrajectory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBestTrajectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBestTrajectory(::grpc::ServerContext* /*context*/, const ::agent::GetBestTrajectoryRequest* /*request*/, ::agent::GetBestTrajectoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBestTrajectory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::GetBestTrajectoryRequest,::agent::GetBestTrajectoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAnything : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAnything() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agent::SetAnythingRequest, ::agent::SetAnythingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agent::SetAnythingRequest, ::agent::SetAnythingResponse>* streamer) {
                       return this->StreamedSetAnything(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAnything() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAnything(::grpc::ServerContext* /*context*/, const ::agent::SetAnythingRequest* /*request*/, ::agent::SetAnythingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAnything(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agent::SetAnythingRequest,::agent::SetAnythingResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_GetState<WithStreamedUnaryMethod_SetState<WithStreamedUnaryMethod_GetAction<WithStreamedUnaryMethod_PlannerStep<WithStreamedUnaryMethod_Step<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_SetTaskParameters<WithStreamedUnaryMethod_GetTaskParameters<WithStreamedUnaryMethod_SetCostWeights<WithStreamedUnaryMethod_GetResiduals<WithStreamedUnaryMethod_GetCostValuesAndWeights<WithStreamedUnaryMethod_SetMode<WithStreamedUnaryMethod_GetMode<WithStreamedUnaryMethod_GetAllModes<WithStreamedUnaryMethod_GetBestTrajectory<WithStreamedUnaryMethod_SetAnything<Service > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_GetState<WithStreamedUnaryMethod_SetState<WithStreamedUnaryMethod_GetAction<WithStreamedUnaryMethod_PlannerStep<WithStreamedUnaryMethod_Step<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_SetTaskParameters<WithStreamedUnaryMethod_GetTaskParameters<WithStreamedUnaryMethod_SetCostWeights<WithStreamedUnaryMethod_GetResiduals<WithStreamedUnaryMethod_GetCostValuesAndWeights<WithStreamedUnaryMethod_SetMode<WithStreamedUnaryMethod_GetMode<WithStreamedUnaryMethod_GetAllModes<WithStreamedUnaryMethod_GetBestTrajectory<WithStreamedUnaryMethod_SetAnything<Service > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace agent


#endif  // GRPC_agent_2eproto__INCLUDED
