// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: filter.proto
// Original file comments:
// Copyright 2023 DeepMind Technologies Limited
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_filter_2eproto__INCLUDED
#define GRPC_filter_2eproto__INCLUDED

#include "filter.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace filter {

class StateEstimation final {
 public:
  static constexpr char const* service_full_name() {
    return "filter.StateEstimation";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Initialize Filter
    virtual ::grpc::Status Init(::grpc::ClientContext* context, const ::filter::InitRequest& request, ::filter::InitResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::InitResponse>> AsyncInit(::grpc::ClientContext* context, const ::filter::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::InitResponse>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::InitResponse>> PrepareAsyncInit(::grpc::ClientContext* context, const ::filter::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::InitResponse>>(PrepareAsyncInitRaw(context, request, cq));
    }
    // Reset Filter
    virtual ::grpc::Status Reset(::grpc::ClientContext* context, const ::filter::ResetRequest& request, ::filter::ResetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::filter::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::ResetResponse>> PrepareAsyncReset(::grpc::ClientContext* context, const ::filter::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::ResetResponse>>(PrepareAsyncResetRaw(context, request, cq));
    }
    // Filter measurement update
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::filter::UpdateRequest& request, ::filter::UpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::filter::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::UpdateResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::filter::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    // Filter state
    virtual ::grpc::Status State(::grpc::ClientContext* context, const ::filter::StateRequest& request, ::filter::StateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::StateResponse>> AsyncState(::grpc::ClientContext* context, const ::filter::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::StateResponse>>(AsyncStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::StateResponse>> PrepareAsyncState(::grpc::ClientContext* context, const ::filter::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::StateResponse>>(PrepareAsyncStateRaw(context, request, cq));
    }
    // Filter covariance
    virtual ::grpc::Status Covariance(::grpc::ClientContext* context, const ::filter::CovarianceRequest& request, ::filter::CovarianceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::CovarianceResponse>> AsyncCovariance(::grpc::ClientContext* context, const ::filter::CovarianceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::CovarianceResponse>>(AsyncCovarianceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::CovarianceResponse>> PrepareAsyncCovariance(::grpc::ClientContext* context, const ::filter::CovarianceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::CovarianceResponse>>(PrepareAsyncCovarianceRaw(context, request, cq));
    }
    // Filter noise
    virtual ::grpc::Status Noise(::grpc::ClientContext* context, const ::filter::NoiseRequest& request, ::filter::NoiseResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::NoiseResponse>> AsyncNoise(::grpc::ClientContext* context, const ::filter::NoiseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::NoiseResponse>>(AsyncNoiseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::NoiseResponse>> PrepareAsyncNoise(::grpc::ClientContext* context, const ::filter::NoiseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filter::NoiseResponse>>(PrepareAsyncNoiseRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Initialize Filter
      virtual void Init(::grpc::ClientContext* context, const ::filter::InitRequest* request, ::filter::InitResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Init(::grpc::ClientContext* context, const ::filter::InitRequest* request, ::filter::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Reset Filter
      virtual void Reset(::grpc::ClientContext* context, const ::filter::ResetRequest* request, ::filter::ResetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Reset(::grpc::ClientContext* context, const ::filter::ResetRequest* request, ::filter::ResetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Filter measurement update
      virtual void Update(::grpc::ClientContext* context, const ::filter::UpdateRequest* request, ::filter::UpdateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Update(::grpc::ClientContext* context, const ::filter::UpdateRequest* request, ::filter::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Filter state
      virtual void State(::grpc::ClientContext* context, const ::filter::StateRequest* request, ::filter::StateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void State(::grpc::ClientContext* context, const ::filter::StateRequest* request, ::filter::StateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Filter covariance
      virtual void Covariance(::grpc::ClientContext* context, const ::filter::CovarianceRequest* request, ::filter::CovarianceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Covariance(::grpc::ClientContext* context, const ::filter::CovarianceRequest* request, ::filter::CovarianceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Filter noise
      virtual void Noise(::grpc::ClientContext* context, const ::filter::NoiseRequest* request, ::filter::NoiseResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Noise(::grpc::ClientContext* context, const ::filter::NoiseRequest* request, ::filter::NoiseResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filter::InitResponse>* AsyncInitRaw(::grpc::ClientContext* context, const ::filter::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filter::InitResponse>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::filter::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filter::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::filter::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filter::ResetResponse>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::filter::ResetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filter::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::filter::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filter::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::filter::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filter::StateResponse>* AsyncStateRaw(::grpc::ClientContext* context, const ::filter::StateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filter::StateResponse>* PrepareAsyncStateRaw(::grpc::ClientContext* context, const ::filter::StateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filter::CovarianceResponse>* AsyncCovarianceRaw(::grpc::ClientContext* context, const ::filter::CovarianceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filter::CovarianceResponse>* PrepareAsyncCovarianceRaw(::grpc::ClientContext* context, const ::filter::CovarianceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filter::NoiseResponse>* AsyncNoiseRaw(::grpc::ClientContext* context, const ::filter::NoiseRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filter::NoiseResponse>* PrepareAsyncNoiseRaw(::grpc::ClientContext* context, const ::filter::NoiseRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Init(::grpc::ClientContext* context, const ::filter::InitRequest& request, ::filter::InitResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::InitResponse>> AsyncInit(::grpc::ClientContext* context, const ::filter::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::InitResponse>>(AsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::InitResponse>> PrepareAsyncInit(::grpc::ClientContext* context, const ::filter::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::InitResponse>>(PrepareAsyncInitRaw(context, request, cq));
    }
    ::grpc::Status Reset(::grpc::ClientContext* context, const ::filter::ResetRequest& request, ::filter::ResetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::ResetResponse>> AsyncReset(::grpc::ClientContext* context, const ::filter::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::ResetResponse>>(AsyncResetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::ResetResponse>> PrepareAsyncReset(::grpc::ClientContext* context, const ::filter::ResetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::ResetResponse>>(PrepareAsyncResetRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::filter::UpdateRequest& request, ::filter::UpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::filter::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::UpdateResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::UpdateResponse>> PrepareAsyncUpdate(::grpc::ClientContext* context, const ::filter::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::UpdateResponse>>(PrepareAsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status State(::grpc::ClientContext* context, const ::filter::StateRequest& request, ::filter::StateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::StateResponse>> AsyncState(::grpc::ClientContext* context, const ::filter::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::StateResponse>>(AsyncStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::StateResponse>> PrepareAsyncState(::grpc::ClientContext* context, const ::filter::StateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::StateResponse>>(PrepareAsyncStateRaw(context, request, cq));
    }
    ::grpc::Status Covariance(::grpc::ClientContext* context, const ::filter::CovarianceRequest& request, ::filter::CovarianceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::CovarianceResponse>> AsyncCovariance(::grpc::ClientContext* context, const ::filter::CovarianceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::CovarianceResponse>>(AsyncCovarianceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::CovarianceResponse>> PrepareAsyncCovariance(::grpc::ClientContext* context, const ::filter::CovarianceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::CovarianceResponse>>(PrepareAsyncCovarianceRaw(context, request, cq));
    }
    ::grpc::Status Noise(::grpc::ClientContext* context, const ::filter::NoiseRequest& request, ::filter::NoiseResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::NoiseResponse>> AsyncNoise(::grpc::ClientContext* context, const ::filter::NoiseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::NoiseResponse>>(AsyncNoiseRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::NoiseResponse>> PrepareAsyncNoise(::grpc::ClientContext* context, const ::filter::NoiseRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filter::NoiseResponse>>(PrepareAsyncNoiseRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Init(::grpc::ClientContext* context, const ::filter::InitRequest* request, ::filter::InitResponse* response, std::function<void(::grpc::Status)>) override;
      void Init(::grpc::ClientContext* context, const ::filter::InitRequest* request, ::filter::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Reset(::grpc::ClientContext* context, const ::filter::ResetRequest* request, ::filter::ResetResponse* response, std::function<void(::grpc::Status)>) override;
      void Reset(::grpc::ClientContext* context, const ::filter::ResetRequest* request, ::filter::ResetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Update(::grpc::ClientContext* context, const ::filter::UpdateRequest* request, ::filter::UpdateResponse* response, std::function<void(::grpc::Status)>) override;
      void Update(::grpc::ClientContext* context, const ::filter::UpdateRequest* request, ::filter::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void State(::grpc::ClientContext* context, const ::filter::StateRequest* request, ::filter::StateResponse* response, std::function<void(::grpc::Status)>) override;
      void State(::grpc::ClientContext* context, const ::filter::StateRequest* request, ::filter::StateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Covariance(::grpc::ClientContext* context, const ::filter::CovarianceRequest* request, ::filter::CovarianceResponse* response, std::function<void(::grpc::Status)>) override;
      void Covariance(::grpc::ClientContext* context, const ::filter::CovarianceRequest* request, ::filter::CovarianceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Noise(::grpc::ClientContext* context, const ::filter::NoiseRequest* request, ::filter::NoiseResponse* response, std::function<void(::grpc::Status)>) override;
      void Noise(::grpc::ClientContext* context, const ::filter::NoiseRequest* request, ::filter::NoiseResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::filter::InitResponse>* AsyncInitRaw(::grpc::ClientContext* context, const ::filter::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filter::InitResponse>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::filter::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filter::ResetResponse>* AsyncResetRaw(::grpc::ClientContext* context, const ::filter::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filter::ResetResponse>* PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::filter::ResetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filter::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::filter::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filter::UpdateResponse>* PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::filter::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filter::StateResponse>* AsyncStateRaw(::grpc::ClientContext* context, const ::filter::StateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filter::StateResponse>* PrepareAsyncStateRaw(::grpc::ClientContext* context, const ::filter::StateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filter::CovarianceResponse>* AsyncCovarianceRaw(::grpc::ClientContext* context, const ::filter::CovarianceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filter::CovarianceResponse>* PrepareAsyncCovarianceRaw(::grpc::ClientContext* context, const ::filter::CovarianceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filter::NoiseResponse>* AsyncNoiseRaw(::grpc::ClientContext* context, const ::filter::NoiseRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filter::NoiseResponse>* PrepareAsyncNoiseRaw(::grpc::ClientContext* context, const ::filter::NoiseRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Init_;
    const ::grpc::internal::RpcMethod rpcmethod_Reset_;
    const ::grpc::internal::RpcMethod rpcmethod_Update_;
    const ::grpc::internal::RpcMethod rpcmethod_State_;
    const ::grpc::internal::RpcMethod rpcmethod_Covariance_;
    const ::grpc::internal::RpcMethod rpcmethod_Noise_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Initialize Filter
    virtual ::grpc::Status Init(::grpc::ServerContext* context, const ::filter::InitRequest* request, ::filter::InitResponse* response);
    // Reset Filter
    virtual ::grpc::Status Reset(::grpc::ServerContext* context, const ::filter::ResetRequest* request, ::filter::ResetResponse* response);
    // Filter measurement update
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::filter::UpdateRequest* request, ::filter::UpdateResponse* response);
    // Filter state
    virtual ::grpc::Status State(::grpc::ServerContext* context, const ::filter::StateRequest* request, ::filter::StateResponse* response);
    // Filter covariance
    virtual ::grpc::Status Covariance(::grpc::ServerContext* context, const ::filter::CovarianceRequest* request, ::filter::CovarianceResponse* response);
    // Filter noise
    virtual ::grpc::Status Noise(::grpc::ServerContext* context, const ::filter::NoiseRequest* request, ::filter::NoiseResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Init() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::filter::InitRequest* /*request*/, ::filter::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::filter::InitRequest* request, ::grpc::ServerAsyncResponseWriter< ::filter::InitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Reset() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::filter::ResetRequest* /*request*/, ::filter::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::filter::ResetRequest* request, ::grpc::ServerAsyncResponseWriter< ::filter::ResetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::filter::UpdateRequest* /*request*/, ::filter::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::filter::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::filter::UpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_State() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::filter::StateRequest* /*request*/, ::filter::StateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestState(::grpc::ServerContext* context, ::filter::StateRequest* request, ::grpc::ServerAsyncResponseWriter< ::filter::StateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Covariance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Covariance() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Covariance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Covariance(::grpc::ServerContext* /*context*/, const ::filter::CovarianceRequest* /*request*/, ::filter::CovarianceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCovariance(::grpc::ServerContext* context, ::filter::CovarianceRequest* request, ::grpc::ServerAsyncResponseWriter< ::filter::CovarianceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Noise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Noise() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Noise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Noise(::grpc::ServerContext* /*context*/, const ::filter::NoiseRequest* /*request*/, ::filter::NoiseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNoise(::grpc::ServerContext* context, ::filter::NoiseRequest* request, ::grpc::ServerAsyncResponseWriter< ::filter::NoiseResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Init<WithAsyncMethod_Reset<WithAsyncMethod_Update<WithAsyncMethod_State<WithAsyncMethod_Covariance<WithAsyncMethod_Noise<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Init() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::filter::InitRequest, ::filter::InitResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filter::InitRequest* request, ::filter::InitResponse* response) { return this->Init(context, request, response); }));}
    void SetMessageAllocatorFor_Init(
        ::grpc::MessageAllocator< ::filter::InitRequest, ::filter::InitResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filter::InitRequest, ::filter::InitResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::filter::InitRequest* /*request*/, ::filter::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init(
      ::grpc::CallbackServerContext* /*context*/, const ::filter::InitRequest* /*request*/, ::filter::InitResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Reset() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::filter::ResetRequest, ::filter::ResetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filter::ResetRequest* request, ::filter::ResetResponse* response) { return this->Reset(context, request, response); }));}
    void SetMessageAllocatorFor_Reset(
        ::grpc::MessageAllocator< ::filter::ResetRequest, ::filter::ResetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filter::ResetRequest, ::filter::ResetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::filter::ResetRequest* /*request*/, ::filter::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Reset(
      ::grpc::CallbackServerContext* /*context*/, const ::filter::ResetRequest* /*request*/, ::filter::ResetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Update() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::filter::UpdateRequest, ::filter::UpdateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filter::UpdateRequest* request, ::filter::UpdateResponse* response) { return this->Update(context, request, response); }));}
    void SetMessageAllocatorFor_Update(
        ::grpc::MessageAllocator< ::filter::UpdateRequest, ::filter::UpdateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filter::UpdateRequest, ::filter::UpdateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::filter::UpdateRequest* /*request*/, ::filter::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::filter::UpdateRequest* /*request*/, ::filter::UpdateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_State() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::filter::StateRequest, ::filter::StateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filter::StateRequest* request, ::filter::StateResponse* response) { return this->State(context, request, response); }));}
    void SetMessageAllocatorFor_State(
        ::grpc::MessageAllocator< ::filter::StateRequest, ::filter::StateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filter::StateRequest, ::filter::StateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::filter::StateRequest* /*request*/, ::filter::StateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* State(
      ::grpc::CallbackServerContext* /*context*/, const ::filter::StateRequest* /*request*/, ::filter::StateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Covariance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Covariance() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::filter::CovarianceRequest, ::filter::CovarianceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filter::CovarianceRequest* request, ::filter::CovarianceResponse* response) { return this->Covariance(context, request, response); }));}
    void SetMessageAllocatorFor_Covariance(
        ::grpc::MessageAllocator< ::filter::CovarianceRequest, ::filter::CovarianceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filter::CovarianceRequest, ::filter::CovarianceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Covariance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Covariance(::grpc::ServerContext* /*context*/, const ::filter::CovarianceRequest* /*request*/, ::filter::CovarianceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Covariance(
      ::grpc::CallbackServerContext* /*context*/, const ::filter::CovarianceRequest* /*request*/, ::filter::CovarianceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Noise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Noise() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::filter::NoiseRequest, ::filter::NoiseResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::filter::NoiseRequest* request, ::filter::NoiseResponse* response) { return this->Noise(context, request, response); }));}
    void SetMessageAllocatorFor_Noise(
        ::grpc::MessageAllocator< ::filter::NoiseRequest, ::filter::NoiseResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::filter::NoiseRequest, ::filter::NoiseResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Noise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Noise(::grpc::ServerContext* /*context*/, const ::filter::NoiseRequest* /*request*/, ::filter::NoiseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Noise(
      ::grpc::CallbackServerContext* /*context*/, const ::filter::NoiseRequest* /*request*/, ::filter::NoiseResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Init<WithCallbackMethod_Reset<WithCallbackMethod_Update<WithCallbackMethod_State<WithCallbackMethod_Covariance<WithCallbackMethod_Noise<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Init() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::filter::InitRequest* /*request*/, ::filter::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Reset() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::filter::ResetRequest* /*request*/, ::filter::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::filter::UpdateRequest* /*request*/, ::filter::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_State() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::filter::StateRequest* /*request*/, ::filter::StateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Covariance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Covariance() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Covariance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Covariance(::grpc::ServerContext* /*context*/, const ::filter::CovarianceRequest* /*request*/, ::filter::CovarianceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Noise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Noise() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Noise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Noise(::grpc::ServerContext* /*context*/, const ::filter::NoiseRequest* /*request*/, ::filter::NoiseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Init() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::filter::InitRequest* /*request*/, ::filter::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Reset() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::filter::ResetRequest* /*request*/, ::filter::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReset(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Update() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::filter::UpdateRequest* /*request*/, ::filter::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_State() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::filter::StateRequest* /*request*/, ::filter::StateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Covariance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Covariance() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Covariance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Covariance(::grpc::ServerContext* /*context*/, const ::filter::CovarianceRequest* /*request*/, ::filter::CovarianceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCovariance(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Noise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Noise() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Noise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Noise(::grpc::ServerContext* /*context*/, const ::filter::NoiseRequest* /*request*/, ::filter::NoiseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNoise(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Init() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Init(context, request, response); }));
    }
    ~WithRawCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::filter::InitRequest* /*request*/, ::filter::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Init(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Reset() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Reset(context, request, response); }));
    }
    ~WithRawCallbackMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::filter::ResetRequest* /*request*/, ::filter::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Reset(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Update() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Update(context, request, response); }));
    }
    ~WithRawCallbackMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::filter::UpdateRequest* /*request*/, ::filter::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_State() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->State(context, request, response); }));
    }
    ~WithRawCallbackMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::filter::StateRequest* /*request*/, ::filter::StateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* State(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Covariance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Covariance() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Covariance(context, request, response); }));
    }
    ~WithRawCallbackMethod_Covariance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Covariance(::grpc::ServerContext* /*context*/, const ::filter::CovarianceRequest* /*request*/, ::filter::CovarianceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Covariance(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Noise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Noise() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Noise(context, request, response); }));
    }
    ~WithRawCallbackMethod_Noise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Noise(::grpc::ServerContext* /*context*/, const ::filter::NoiseRequest* /*request*/, ::filter::NoiseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Noise(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Init() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filter::InitRequest, ::filter::InitResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filter::InitRequest, ::filter::InitResponse>* streamer) {
                       return this->StreamedInit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::filter::InitRequest* /*request*/, ::filter::InitResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filter::InitRequest,::filter::InitResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Reset : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Reset() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filter::ResetRequest, ::filter::ResetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filter::ResetRequest, ::filter::ResetResponse>* streamer) {
                       return this->StreamedReset(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Reset() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Reset(::grpc::ServerContext* /*context*/, const ::filter::ResetRequest* /*request*/, ::filter::ResetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReset(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filter::ResetRequest,::filter::ResetResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filter::UpdateRequest, ::filter::UpdateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filter::UpdateRequest, ::filter::UpdateResponse>* streamer) {
                       return this->StreamedUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* /*context*/, const ::filter::UpdateRequest* /*request*/, ::filter::UpdateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filter::UpdateRequest,::filter::UpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_State : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_State() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filter::StateRequest, ::filter::StateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filter::StateRequest, ::filter::StateResponse>* streamer) {
                       return this->StreamedState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_State() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status State(::grpc::ServerContext* /*context*/, const ::filter::StateRequest* /*request*/, ::filter::StateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filter::StateRequest,::filter::StateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Covariance : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Covariance() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filter::CovarianceRequest, ::filter::CovarianceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filter::CovarianceRequest, ::filter::CovarianceResponse>* streamer) {
                       return this->StreamedCovariance(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Covariance() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Covariance(::grpc::ServerContext* /*context*/, const ::filter::CovarianceRequest* /*request*/, ::filter::CovarianceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCovariance(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filter::CovarianceRequest,::filter::CovarianceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Noise : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Noise() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::filter::NoiseRequest, ::filter::NoiseResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::filter::NoiseRequest, ::filter::NoiseResponse>* streamer) {
                       return this->StreamedNoise(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Noise() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Noise(::grpc::ServerContext* /*context*/, const ::filter::NoiseRequest* /*request*/, ::filter::NoiseResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNoise(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filter::NoiseRequest,::filter::NoiseResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_State<WithStreamedUnaryMethod_Covariance<WithStreamedUnaryMethod_Noise<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Init<WithStreamedUnaryMethod_Reset<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_State<WithStreamedUnaryMethod_Covariance<WithStreamedUnaryMethod_Noise<Service > > > > > > StreamedService;
};

}  // namespace filter


#endif  // GRPC_filter_2eproto__INCLUDED
