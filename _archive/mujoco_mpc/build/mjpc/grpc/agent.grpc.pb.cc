// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: agent.proto

#include "agent.pb.h"
#include "agent.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace agent {

static const char* Agent_method_names[] = {
  "/agent.Agent/Init",
  "/agent.Agent/GetState",
  "/agent.Agent/SetState",
  "/agent.Agent/GetAction",
  "/agent.Agent/PlannerStep",
  "/agent.Agent/Step",
  "/agent.Agent/Reset",
  "/agent.Agent/SetTaskParameters",
  "/agent.Agent/GetTaskParameters",
  "/agent.Agent/SetCostWeights",
  "/agent.Agent/GetResiduals",
  "/agent.Agent/GetCostValuesAndWeights",
  "/agent.Agent/SetMode",
  "/agent.Agent/GetMode",
  "/agent.Agent/GetAllModes",
  "/agent.Agent/GetBestTrajectory",
  "/agent.Agent/SetAnything",
};

std::unique_ptr< Agent::Stub> Agent::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Agent::Stub> stub(new Agent::Stub(channel, options));
  return stub;
}

Agent::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Init_(Agent_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetState_(Agent_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetState_(Agent_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAction_(Agent_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlannerStep_(Agent_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Step_(Agent_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reset_(Agent_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTaskParameters_(Agent_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTaskParameters_(Agent_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCostWeights_(Agent_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetResiduals_(Agent_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCostValuesAndWeights_(Agent_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMode_(Agent_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMode_(Agent_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllModes_(Agent_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBestTrajectory_(Agent_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAnything_(Agent_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Agent::Stub::Init(::grpc::ClientContext* context, const ::agent::InitRequest& request, ::agent::InitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::InitRequest, ::agent::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Init_, context, request, response);
}

void Agent::Stub::async::Init(::grpc::ClientContext* context, const ::agent::InitRequest* request, ::agent::InitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::InitRequest, ::agent::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, std::move(f));
}

void Agent::Stub::async::Init(::grpc::ClientContext* context, const ::agent::InitRequest* request, ::agent::InitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::InitResponse>* Agent::Stub::PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::agent::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::InitResponse, ::agent::InitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Init_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::InitResponse>* Agent::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::agent::InitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::GetState(::grpc::ClientContext* context, const ::agent::GetStateRequest& request, ::agent::GetStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::GetStateRequest, ::agent::GetStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetState_, context, request, response);
}

void Agent::Stub::async::GetState(::grpc::ClientContext* context, const ::agent::GetStateRequest* request, ::agent::GetStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::GetStateRequest, ::agent::GetStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetState_, context, request, response, std::move(f));
}

void Agent::Stub::async::GetState(::grpc::ClientContext* context, const ::agent::GetStateRequest* request, ::agent::GetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::GetStateResponse>* Agent::Stub::PrepareAsyncGetStateRaw(::grpc::ClientContext* context, const ::agent::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::GetStateResponse, ::agent::GetStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::GetStateResponse>* Agent::Stub::AsyncGetStateRaw(::grpc::ClientContext* context, const ::agent::GetStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::SetState(::grpc::ClientContext* context, const ::agent::SetStateRequest& request, ::agent::SetStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::SetStateRequest, ::agent::SetStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetState_, context, request, response);
}

void Agent::Stub::async::SetState(::grpc::ClientContext* context, const ::agent::SetStateRequest* request, ::agent::SetStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::SetStateRequest, ::agent::SetStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetState_, context, request, response, std::move(f));
}

void Agent::Stub::async::SetState(::grpc::ClientContext* context, const ::agent::SetStateRequest* request, ::agent::SetStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::SetStateResponse>* Agent::Stub::PrepareAsyncSetStateRaw(::grpc::ClientContext* context, const ::agent::SetStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::SetStateResponse, ::agent::SetStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::SetStateResponse>* Agent::Stub::AsyncSetStateRaw(::grpc::ClientContext* context, const ::agent::SetStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::GetAction(::grpc::ClientContext* context, const ::agent::GetActionRequest& request, ::agent::GetActionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::GetActionRequest, ::agent::GetActionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAction_, context, request, response);
}

void Agent::Stub::async::GetAction(::grpc::ClientContext* context, const ::agent::GetActionRequest* request, ::agent::GetActionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::GetActionRequest, ::agent::GetActionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAction_, context, request, response, std::move(f));
}

void Agent::Stub::async::GetAction(::grpc::ClientContext* context, const ::agent::GetActionRequest* request, ::agent::GetActionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::GetActionResponse>* Agent::Stub::PrepareAsyncGetActionRaw(::grpc::ClientContext* context, const ::agent::GetActionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::GetActionResponse, ::agent::GetActionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::GetActionResponse>* Agent::Stub::AsyncGetActionRaw(::grpc::ClientContext* context, const ::agent::GetActionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetActionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::PlannerStep(::grpc::ClientContext* context, const ::agent::PlannerStepRequest& request, ::agent::PlannerStepResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::PlannerStepRequest, ::agent::PlannerStepResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PlannerStep_, context, request, response);
}

void Agent::Stub::async::PlannerStep(::grpc::ClientContext* context, const ::agent::PlannerStepRequest* request, ::agent::PlannerStepResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::PlannerStepRequest, ::agent::PlannerStepResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlannerStep_, context, request, response, std::move(f));
}

void Agent::Stub::async::PlannerStep(::grpc::ClientContext* context, const ::agent::PlannerStepRequest* request, ::agent::PlannerStepResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PlannerStep_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::PlannerStepResponse>* Agent::Stub::PrepareAsyncPlannerStepRaw(::grpc::ClientContext* context, const ::agent::PlannerStepRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::PlannerStepResponse, ::agent::PlannerStepRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PlannerStep_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::PlannerStepResponse>* Agent::Stub::AsyncPlannerStepRaw(::grpc::ClientContext* context, const ::agent::PlannerStepRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPlannerStepRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::Step(::grpc::ClientContext* context, const ::agent::StepRequest& request, ::agent::StepResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::StepRequest, ::agent::StepResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Step_, context, request, response);
}

void Agent::Stub::async::Step(::grpc::ClientContext* context, const ::agent::StepRequest* request, ::agent::StepResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::StepRequest, ::agent::StepResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, std::move(f));
}

void Agent::Stub::async::Step(::grpc::ClientContext* context, const ::agent::StepRequest* request, ::agent::StepResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Step_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::StepResponse>* Agent::Stub::PrepareAsyncStepRaw(::grpc::ClientContext* context, const ::agent::StepRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::StepResponse, ::agent::StepRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Step_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::StepResponse>* Agent::Stub::AsyncStepRaw(::grpc::ClientContext* context, const ::agent::StepRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStepRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::Reset(::grpc::ClientContext* context, const ::agent::ResetRequest& request, ::agent::ResetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::ResetRequest, ::agent::ResetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Reset_, context, request, response);
}

void Agent::Stub::async::Reset(::grpc::ClientContext* context, const ::agent::ResetRequest* request, ::agent::ResetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::ResetRequest, ::agent::ResetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, std::move(f));
}

void Agent::Stub::async::Reset(::grpc::ClientContext* context, const ::agent::ResetRequest* request, ::agent::ResetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::ResetResponse>* Agent::Stub::PrepareAsyncResetRaw(::grpc::ClientContext* context, const ::agent::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::ResetResponse, ::agent::ResetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Reset_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::ResetResponse>* Agent::Stub::AsyncResetRaw(::grpc::ClientContext* context, const ::agent::ResetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::SetTaskParameters(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest& request, ::agent::SetTaskParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::SetTaskParametersRequest, ::agent::SetTaskParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTaskParameters_, context, request, response);
}

void Agent::Stub::async::SetTaskParameters(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest* request, ::agent::SetTaskParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::SetTaskParametersRequest, ::agent::SetTaskParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTaskParameters_, context, request, response, std::move(f));
}

void Agent::Stub::async::SetTaskParameters(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest* request, ::agent::SetTaskParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTaskParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::SetTaskParametersResponse>* Agent::Stub::PrepareAsyncSetTaskParametersRaw(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::SetTaskParametersResponse, ::agent::SetTaskParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTaskParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::SetTaskParametersResponse>* Agent::Stub::AsyncSetTaskParametersRaw(::grpc::ClientContext* context, const ::agent::SetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTaskParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::GetTaskParameters(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest& request, ::agent::GetTaskParametersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::GetTaskParametersRequest, ::agent::GetTaskParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTaskParameters_, context, request, response);
}

void Agent::Stub::async::GetTaskParameters(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest* request, ::agent::GetTaskParametersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::GetTaskParametersRequest, ::agent::GetTaskParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTaskParameters_, context, request, response, std::move(f));
}

void Agent::Stub::async::GetTaskParameters(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest* request, ::agent::GetTaskParametersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTaskParameters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::GetTaskParametersResponse>* Agent::Stub::PrepareAsyncGetTaskParametersRaw(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::GetTaskParametersResponse, ::agent::GetTaskParametersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTaskParameters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::GetTaskParametersResponse>* Agent::Stub::AsyncGetTaskParametersRaw(::grpc::ClientContext* context, const ::agent::GetTaskParametersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTaskParametersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::SetCostWeights(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest& request, ::agent::SetCostWeightsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::SetCostWeightsRequest, ::agent::SetCostWeightsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCostWeights_, context, request, response);
}

void Agent::Stub::async::SetCostWeights(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest* request, ::agent::SetCostWeightsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::SetCostWeightsRequest, ::agent::SetCostWeightsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCostWeights_, context, request, response, std::move(f));
}

void Agent::Stub::async::SetCostWeights(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest* request, ::agent::SetCostWeightsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCostWeights_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::SetCostWeightsResponse>* Agent::Stub::PrepareAsyncSetCostWeightsRaw(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::SetCostWeightsResponse, ::agent::SetCostWeightsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCostWeights_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::SetCostWeightsResponse>* Agent::Stub::AsyncSetCostWeightsRaw(::grpc::ClientContext* context, const ::agent::SetCostWeightsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCostWeightsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::GetResiduals(::grpc::ClientContext* context, const ::agent::GetResidualsRequest& request, ::agent::GetResidualsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::GetResidualsRequest, ::agent::GetResidualsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetResiduals_, context, request, response);
}

void Agent::Stub::async::GetResiduals(::grpc::ClientContext* context, const ::agent::GetResidualsRequest* request, ::agent::GetResidualsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::GetResidualsRequest, ::agent::GetResidualsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetResiduals_, context, request, response, std::move(f));
}

void Agent::Stub::async::GetResiduals(::grpc::ClientContext* context, const ::agent::GetResidualsRequest* request, ::agent::GetResidualsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetResiduals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::GetResidualsResponse>* Agent::Stub::PrepareAsyncGetResidualsRaw(::grpc::ClientContext* context, const ::agent::GetResidualsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::GetResidualsResponse, ::agent::GetResidualsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetResiduals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::GetResidualsResponse>* Agent::Stub::AsyncGetResidualsRaw(::grpc::ClientContext* context, const ::agent::GetResidualsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetResidualsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::GetCostValuesAndWeights(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest& request, ::agent::GetCostValuesAndWeightsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::GetCostValuesAndWeightsRequest, ::agent::GetCostValuesAndWeightsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCostValuesAndWeights_, context, request, response);
}

void Agent::Stub::async::GetCostValuesAndWeights(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest* request, ::agent::GetCostValuesAndWeightsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::GetCostValuesAndWeightsRequest, ::agent::GetCostValuesAndWeightsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCostValuesAndWeights_, context, request, response, std::move(f));
}

void Agent::Stub::async::GetCostValuesAndWeights(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest* request, ::agent::GetCostValuesAndWeightsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCostValuesAndWeights_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::GetCostValuesAndWeightsResponse>* Agent::Stub::PrepareAsyncGetCostValuesAndWeightsRaw(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::GetCostValuesAndWeightsResponse, ::agent::GetCostValuesAndWeightsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCostValuesAndWeights_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::GetCostValuesAndWeightsResponse>* Agent::Stub::AsyncGetCostValuesAndWeightsRaw(::grpc::ClientContext* context, const ::agent::GetCostValuesAndWeightsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCostValuesAndWeightsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::SetMode(::grpc::ClientContext* context, const ::agent::SetModeRequest& request, ::agent::SetModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::SetModeRequest, ::agent::SetModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMode_, context, request, response);
}

void Agent::Stub::async::SetMode(::grpc::ClientContext* context, const ::agent::SetModeRequest* request, ::agent::SetModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::SetModeRequest, ::agent::SetModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMode_, context, request, response, std::move(f));
}

void Agent::Stub::async::SetMode(::grpc::ClientContext* context, const ::agent::SetModeRequest* request, ::agent::SetModeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::SetModeResponse>* Agent::Stub::PrepareAsyncSetModeRaw(::grpc::ClientContext* context, const ::agent::SetModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::SetModeResponse, ::agent::SetModeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::SetModeResponse>* Agent::Stub::AsyncSetModeRaw(::grpc::ClientContext* context, const ::agent::SetModeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::GetMode(::grpc::ClientContext* context, const ::agent::GetModeRequest& request, ::agent::GetModeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::GetModeRequest, ::agent::GetModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMode_, context, request, response);
}

void Agent::Stub::async::GetMode(::grpc::ClientContext* context, const ::agent::GetModeRequest* request, ::agent::GetModeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::GetModeRequest, ::agent::GetModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMode_, context, request, response, std::move(f));
}

void Agent::Stub::async::GetMode(::grpc::ClientContext* context, const ::agent::GetModeRequest* request, ::agent::GetModeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::GetModeResponse>* Agent::Stub::PrepareAsyncGetModeRaw(::grpc::ClientContext* context, const ::agent::GetModeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::GetModeResponse, ::agent::GetModeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::GetModeResponse>* Agent::Stub::AsyncGetModeRaw(::grpc::ClientContext* context, const ::agent::GetModeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetModeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::GetAllModes(::grpc::ClientContext* context, const ::agent::GetAllModesRequest& request, ::agent::GetAllModesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::GetAllModesRequest, ::agent::GetAllModesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAllModes_, context, request, response);
}

void Agent::Stub::async::GetAllModes(::grpc::ClientContext* context, const ::agent::GetAllModesRequest* request, ::agent::GetAllModesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::GetAllModesRequest, ::agent::GetAllModesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllModes_, context, request, response, std::move(f));
}

void Agent::Stub::async::GetAllModes(::grpc::ClientContext* context, const ::agent::GetAllModesRequest* request, ::agent::GetAllModesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAllModes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::GetAllModesResponse>* Agent::Stub::PrepareAsyncGetAllModesRaw(::grpc::ClientContext* context, const ::agent::GetAllModesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::GetAllModesResponse, ::agent::GetAllModesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAllModes_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::GetAllModesResponse>* Agent::Stub::AsyncGetAllModesRaw(::grpc::ClientContext* context, const ::agent::GetAllModesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAllModesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::GetBestTrajectory(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest& request, ::agent::GetBestTrajectoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::GetBestTrajectoryRequest, ::agent::GetBestTrajectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBestTrajectory_, context, request, response);
}

void Agent::Stub::async::GetBestTrajectory(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest* request, ::agent::GetBestTrajectoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::GetBestTrajectoryRequest, ::agent::GetBestTrajectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBestTrajectory_, context, request, response, std::move(f));
}

void Agent::Stub::async::GetBestTrajectory(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest* request, ::agent::GetBestTrajectoryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBestTrajectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::GetBestTrajectoryResponse>* Agent::Stub::PrepareAsyncGetBestTrajectoryRaw(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::GetBestTrajectoryResponse, ::agent::GetBestTrajectoryRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBestTrajectory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::GetBestTrajectoryResponse>* Agent::Stub::AsyncGetBestTrajectoryRaw(::grpc::ClientContext* context, const ::agent::GetBestTrajectoryRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBestTrajectoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Agent::Stub::SetAnything(::grpc::ClientContext* context, const ::agent::SetAnythingRequest& request, ::agent::SetAnythingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agent::SetAnythingRequest, ::agent::SetAnythingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAnything_, context, request, response);
}

void Agent::Stub::async::SetAnything(::grpc::ClientContext* context, const ::agent::SetAnythingRequest* request, ::agent::SetAnythingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agent::SetAnythingRequest, ::agent::SetAnythingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAnything_, context, request, response, std::move(f));
}

void Agent::Stub::async::SetAnything(::grpc::ClientContext* context, const ::agent::SetAnythingRequest* request, ::agent::SetAnythingResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAnything_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agent::SetAnythingResponse>* Agent::Stub::PrepareAsyncSetAnythingRaw(::grpc::ClientContext* context, const ::agent::SetAnythingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agent::SetAnythingResponse, ::agent::SetAnythingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAnything_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agent::SetAnythingResponse>* Agent::Stub::AsyncSetAnythingRaw(::grpc::ClientContext* context, const ::agent::SetAnythingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAnythingRaw(context, request, cq);
  result->StartCall();
  return result;
}

Agent::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::InitRequest, ::agent::InitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::InitRequest* req,
             ::agent::InitResponse* resp) {
               return service->Init(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::GetStateRequest, ::agent::GetStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::GetStateRequest* req,
             ::agent::GetStateResponse* resp) {
               return service->GetState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::SetStateRequest, ::agent::SetStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::SetStateRequest* req,
             ::agent::SetStateResponse* resp) {
               return service->SetState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::GetActionRequest, ::agent::GetActionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::GetActionRequest* req,
             ::agent::GetActionResponse* resp) {
               return service->GetAction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::PlannerStepRequest, ::agent::PlannerStepResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::PlannerStepRequest* req,
             ::agent::PlannerStepResponse* resp) {
               return service->PlannerStep(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::StepRequest, ::agent::StepResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::StepRequest* req,
             ::agent::StepResponse* resp) {
               return service->Step(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::ResetRequest, ::agent::ResetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::ResetRequest* req,
             ::agent::ResetResponse* resp) {
               return service->Reset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::SetTaskParametersRequest, ::agent::SetTaskParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::SetTaskParametersRequest* req,
             ::agent::SetTaskParametersResponse* resp) {
               return service->SetTaskParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::GetTaskParametersRequest, ::agent::GetTaskParametersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::GetTaskParametersRequest* req,
             ::agent::GetTaskParametersResponse* resp) {
               return service->GetTaskParameters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::SetCostWeightsRequest, ::agent::SetCostWeightsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::SetCostWeightsRequest* req,
             ::agent::SetCostWeightsResponse* resp) {
               return service->SetCostWeights(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::GetResidualsRequest, ::agent::GetResidualsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::GetResidualsRequest* req,
             ::agent::GetResidualsResponse* resp) {
               return service->GetResiduals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::GetCostValuesAndWeightsRequest, ::agent::GetCostValuesAndWeightsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::GetCostValuesAndWeightsRequest* req,
             ::agent::GetCostValuesAndWeightsResponse* resp) {
               return service->GetCostValuesAndWeights(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::SetModeRequest, ::agent::SetModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::SetModeRequest* req,
             ::agent::SetModeResponse* resp) {
               return service->SetMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::GetModeRequest, ::agent::GetModeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::GetModeRequest* req,
             ::agent::GetModeResponse* resp) {
               return service->GetMode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::GetAllModesRequest, ::agent::GetAllModesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::GetAllModesRequest* req,
             ::agent::GetAllModesResponse* resp) {
               return service->GetAllModes(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::GetBestTrajectoryRequest, ::agent::GetBestTrajectoryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::GetBestTrajectoryRequest* req,
             ::agent::GetBestTrajectoryResponse* resp) {
               return service->GetBestTrajectory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Agent_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Agent::Service, ::agent::SetAnythingRequest, ::agent::SetAnythingResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Agent::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agent::SetAnythingRequest* req,
             ::agent::SetAnythingResponse* resp) {
               return service->SetAnything(ctx, req, resp);
             }, this)));
}

Agent::Service::~Service() {
}

::grpc::Status Agent::Service::Init(::grpc::ServerContext* context, const ::agent::InitRequest* request, ::agent::InitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetState(::grpc::ServerContext* context, const ::agent::GetStateRequest* request, ::agent::GetStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::SetState(::grpc::ServerContext* context, const ::agent::SetStateRequest* request, ::agent::SetStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetAction(::grpc::ServerContext* context, const ::agent::GetActionRequest* request, ::agent::GetActionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::PlannerStep(::grpc::ServerContext* context, const ::agent::PlannerStepRequest* request, ::agent::PlannerStepResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::Step(::grpc::ServerContext* context, const ::agent::StepRequest* request, ::agent::StepResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::Reset(::grpc::ServerContext* context, const ::agent::ResetRequest* request, ::agent::ResetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::SetTaskParameters(::grpc::ServerContext* context, const ::agent::SetTaskParametersRequest* request, ::agent::SetTaskParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetTaskParameters(::grpc::ServerContext* context, const ::agent::GetTaskParametersRequest* request, ::agent::GetTaskParametersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::SetCostWeights(::grpc::ServerContext* context, const ::agent::SetCostWeightsRequest* request, ::agent::SetCostWeightsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetResiduals(::grpc::ServerContext* context, const ::agent::GetResidualsRequest* request, ::agent::GetResidualsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetCostValuesAndWeights(::grpc::ServerContext* context, const ::agent::GetCostValuesAndWeightsRequest* request, ::agent::GetCostValuesAndWeightsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::SetMode(::grpc::ServerContext* context, const ::agent::SetModeRequest* request, ::agent::SetModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetMode(::grpc::ServerContext* context, const ::agent::GetModeRequest* request, ::agent::GetModeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetAllModes(::grpc::ServerContext* context, const ::agent::GetAllModesRequest* request, ::agent::GetAllModesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::GetBestTrajectory(::grpc::ServerContext* context, const ::agent::GetBestTrajectoryRequest* request, ::agent::GetBestTrajectoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Agent::Service::SetAnything(::grpc::ServerContext* context, const ::agent::SetAnythingRequest* request, ::agent::SetAnythingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace agent

